// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icon/types/v1/types.proto

package icon

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BlockIdFlag indicates which BlcokID the signature is for
type BlockIDFlag int32

const (
	BlockIDFlagUnknown BlockIDFlag = 0
	BlockIDFlagAbsent  BlockIDFlag = 1
	BlockIDFlagCommit  BlockIDFlag = 2
	BlockIDFlagNil     BlockIDFlag = 3
)

var BlockIDFlag_name = map[int32]string{
	0: "BLOCK_ID_FLAG_UNKNOWN",
	1: "BLOCK_ID_FLAG_ABSENT",
	2: "BLOCK_ID_FLAG_COMMIT",
	3: "BLOCK_ID_FLAG_NIL",
}

var BlockIDFlag_value = map[string]int32{
	"BLOCK_ID_FLAG_UNKNOWN": 0,
	"BLOCK_ID_FLAG_ABSENT":  1,
	"BLOCK_ID_FLAG_COMMIT":  2,
	"BLOCK_ID_FLAG_NIL":     3,
}

func (x BlockIDFlag) String() string {
	return proto.EnumName(BlockIDFlag_name, int32(x))
}

func (BlockIDFlag) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{0}
}

// SignedMsgType is a type of signed message in the consensus.
type SignedMsgType int32

const (
	UnknownType SignedMsgType = 0
	// Votes
	PrevoteType   SignedMsgType = 1
	PrecommitType SignedMsgType = 2
	// Proposals
	ProposalType SignedMsgType = 32
)

var SignedMsgType_name = map[int32]string{
	0:  "SIGNED_MSG_TYPE_UNKNOWN",
	1:  "SIGNED_MSG_TYPE_PREVOTE",
	2:  "SIGNED_MSG_TYPE_PRECOMMIT",
	32: "SIGNED_MSG_TYPE_PROPOSAL",
}

var SignedMsgType_value = map[string]int32{
	"SIGNED_MSG_TYPE_UNKNOWN":   0,
	"SIGNED_MSG_TYPE_PREVOTE":   1,
	"SIGNED_MSG_TYPE_PRECOMMIT": 2,
	"SIGNED_MSG_TYPE_PROPOSAL":  32,
}

func (x SignedMsgType) String() string {
	return proto.EnumName(SignedMsgType_name, int32(x))
}

func (SignedMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{1}
}

type SignedHeader struct {
	Header         *BTPHeader      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	CommitVoteList *CommitVoteList `protobuf:"bytes,2,opt,name=commit_vote_list,json=commitVoteList,proto3" json:"commit_vote_list,omitempty"`
}

func (m *SignedHeader) Reset()         { *m = SignedHeader{} }
func (m *SignedHeader) String() string { return proto.CompactTextString(m) }
func (*SignedHeader) ProtoMessage()    {}
func (*SignedHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{0}
}
func (m *SignedHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedHeader.Merge(m, src)
}
func (m *SignedHeader) XXX_Size() int {
	return m.Size()
}
func (m *SignedHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SignedHeader proto.InternalMessageInfo

type BTPHeader struct {
	MainHeight             int64         `protobuf:"varint,1,opt,name=main_height,json=mainHeight,proto3" json:"main_height,omitempty"`
	Round                  int32         `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	NextProofContextHash   []byte        `protobuf:"bytes,3,opt,name=next_proof_context_hash,json=nextProofContextHash,proto3" json:"next_proof_context_hash,omitempty"`
	NetworkSectionToRoot   []*MerkleNode `protobuf:"bytes,4,rep,name=network_section_to_root,json=networkSectionToRoot,proto3" json:"network_section_to_root,omitempty"`
	NetworkId              int64         `protobuf:"varint,5,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	UpdateNumber           int64         `protobuf:"varint,6,opt,name=update_number,json=updateNumber,proto3" json:"update_number,omitempty"`
	PrevNetworkSectionHash []byte        `protobuf:"bytes,7,opt,name=prev_network_section_hash,json=prevNetworkSectionHash,proto3" json:"prev_network_section_hash,omitempty"`
	MessageCount           int64         `protobuf:"varint,8,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	MessageRoot            []byte        `protobuf:"bytes,9,opt,name=message_root,json=messageRoot,proto3" json:"message_root,omitempty"`
	NextProofContext       []byte        `protobuf:"bytes,10,opt,name=next_proof_context,json=nextProofContext,proto3" json:"next_proof_context,omitempty"`
}

func (m *BTPHeader) Reset()         { *m = BTPHeader{} }
func (m *BTPHeader) String() string { return proto.CompactTextString(m) }
func (*BTPHeader) ProtoMessage()    {}
func (*BTPHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{1}
}
func (m *BTPHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTPHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTPHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTPHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTPHeader.Merge(m, src)
}
func (m *BTPHeader) XXX_Size() int {
	return m.Size()
}
func (m *BTPHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BTPHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BTPHeader proto.InternalMessageInfo

type MerkleNode struct {
	Dir   int32  `protobuf:"varint,1,opt,name=Dir,proto3" json:"Dir,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MerkleNode) Reset()         { *m = MerkleNode{} }
func (m *MerkleNode) String() string { return proto.CompactTextString(m) }
func (*MerkleNode) ProtoMessage()    {}
func (*MerkleNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{2}
}
func (m *MerkleNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MerkleNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MerkleNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MerkleNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerkleNode.Merge(m, src)
}
func (m *MerkleNode) XXX_Size() int {
	return m.Size()
}
func (m *MerkleNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MerkleNode.DiscardUnknown(m)
}

var xxx_messageInfo_MerkleNode proto.InternalMessageInfo

type CommitVoteList struct {
	Round          int32           `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	BlockPartSetId *PartSetID      `protobuf:"bytes,2,opt,name=block_part_set_id,json=blockPartSetId,proto3" json:"block_part_set_id,omitempty"`
	Items          *CommitVoteItem `protobuf:"bytes,3,opt,name=items,proto3" json:"items,omitempty"`
}

func (m *CommitVoteList) Reset()         { *m = CommitVoteList{} }
func (m *CommitVoteList) String() string { return proto.CompactTextString(m) }
func (*CommitVoteList) ProtoMessage()    {}
func (*CommitVoteList) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{3}
}
func (m *CommitVoteList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitVoteList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitVoteList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitVoteList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitVoteList.Merge(m, src)
}
func (m *CommitVoteList) XXX_Size() int {
	return m.Size()
}
func (m *CommitVoteList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitVoteList.DiscardUnknown(m)
}

var xxx_messageInfo_CommitVoteList proto.InternalMessageInfo

type CommitVoteItem struct {
	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CommitVoteItem) Reset()         { *m = CommitVoteItem{} }
func (m *CommitVoteItem) String() string { return proto.CompactTextString(m) }
func (*CommitVoteItem) ProtoMessage()    {}
func (*CommitVoteItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{4}
}
func (m *CommitVoteItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitVoteItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommitVoteItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommitVoteItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitVoteItem.Merge(m, src)
}
func (m *CommitVoteItem) XXX_Size() int {
	return m.Size()
}
func (m *CommitVoteItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitVoteItem.DiscardUnknown(m)
}

var xxx_messageInfo_CommitVoteItem proto.InternalMessageInfo

type PartSetID struct {
	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Hash  []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *PartSetID) Reset()         { *m = PartSetID{} }
func (m *PartSetID) String() string { return proto.CompactTextString(m) }
func (*PartSetID) ProtoMessage()    {}
func (*PartSetID) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{5}
}
func (m *PartSetID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartSetID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartSetID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartSetID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartSetID.Merge(m, src)
}
func (m *PartSetID) XXX_Size() int {
	return m.Size()
}
func (m *PartSetID) XXX_DiscardUnknown() {
	xxx_messageInfo_PartSetID.DiscardUnknown(m)
}

var xxx_messageInfo_PartSetID proto.InternalMessageInfo

type HR struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Rount  int32 `protobuf:"varint,2,opt,name=rount,proto3" json:"rount,omitempty"`
}

func (m *HR) Reset()         { *m = HR{} }
func (m *HR) String() string { return proto.CompactTextString(m) }
func (*HR) ProtoMessage()    {}
func (*HR) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{6}
}
func (m *HR) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HR.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HR.Merge(m, src)
}
func (m *HR) XXX_Size() int {
	return m.Size()
}
func (m *HR) XXX_DiscardUnknown() {
	xxx_messageInfo_HR.DiscardUnknown(m)
}

var xxx_messageInfo_HR proto.InternalMessageInfo

type Vote struct {
	Height         int64         `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round          int32         `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Type           SignedMsgType `protobuf:"varint,3,opt,name=type,proto3,enum=icon.types.v1.SignedMsgType" json:"type,omitempty"`
	BlockId        []byte        `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	BlockPartSetId *PartSetID    `protobuf:"bytes,5,opt,name=block_part_set_id,json=blockPartSetId,proto3" json:"block_part_set_id,omitempty"`
	Timestamp      int64         `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{7}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

type ValidatorSet struct {
	Validators [][]byte `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (m *ValidatorSet) Reset()         { *m = ValidatorSet{} }
func (m *ValidatorSet) String() string { return proto.CompactTextString(m) }
func (*ValidatorSet) ProtoMessage()    {}
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb5e993a7dd5d0ff, []int{8}
}
func (m *ValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSet.Merge(m, src)
}
func (m *ValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSet proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("icon.types.v1.BlockIDFlag", BlockIDFlag_name, BlockIDFlag_value)
	proto.RegisterEnum("icon.types.v1.SignedMsgType", SignedMsgType_name, SignedMsgType_value)
	proto.RegisterType((*SignedHeader)(nil), "icon.types.v1.SignedHeader")
	proto.RegisterType((*BTPHeader)(nil), "icon.types.v1.BTPHeader")
	proto.RegisterType((*MerkleNode)(nil), "icon.types.v1.MerkleNode")
	proto.RegisterType((*CommitVoteList)(nil), "icon.types.v1.CommitVoteList")
	proto.RegisterType((*CommitVoteItem)(nil), "icon.types.v1.CommitVoteItem")
	proto.RegisterType((*PartSetID)(nil), "icon.types.v1.PartSetID")
	proto.RegisterType((*HR)(nil), "icon.types.v1.HR")
	proto.RegisterType((*Vote)(nil), "icon.types.v1.Vote")
	proto.RegisterType((*ValidatorSet)(nil), "icon.types.v1.ValidatorSet")
}

func init() { proto.RegisterFile("icon/types/v1/types.proto", fileDescriptor_eb5e993a7dd5d0ff) }

var fileDescriptor_eb5e993a7dd5d0ff = []byte{
	// 1009 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0x1a, 0x47,
	0x14, 0x67, 0xc1, 0x38, 0xf6, 0x03, 0x9c, 0xf5, 0xc8, 0x71, 0x16, 0x14, 0x6f, 0xb7, 0xe4, 0xe2,
	0x56, 0x11, 0x18, 0xa7, 0x39, 0xd4, 0x3d, 0x19, 0xec, 0xd8, 0xab, 0xc0, 0xb2, 0x5a, 0x08, 0xfd,
	0x23, 0x4b, 0xab, 0x35, 0x3b, 0x85, 0x95, 0xd9, 0x1d, 0xb4, 0x3b, 0x90, 0xe6, 0x1b, 0xb4, 0x9c,
	0xfa, 0x05, 0x90, 0xaa, 0xb6, 0x87, 0xaa, 0xa7, 0x7e, 0x84, 0x1e, 0xa3, 0x9e, 0x72, 0x6b, 0x8f,
	0xad, 0xdd, 0x53, 0x3f, 0x45, 0x35, 0x33, 0x60, 0xb3, 0x38, 0x69, 0x95, 0x0b, 0x9a, 0xdf, 0x7b,
	0xbf, 0xdf, 0xe3, 0xfd, 0x9b, 0x59, 0xc8, 0x7b, 0x5d, 0x12, 0x94, 0xe9, 0xcb, 0x21, 0x8e, 0xca,
	0xe3, 0x8a, 0x38, 0x94, 0x86, 0x21, 0xa1, 0x04, 0xe5, 0x98, 0xab, 0x24, 0x2c, 0xe3, 0x4a, 0x61,
	0xab, 0x47, 0x7a, 0x84, 0x7b, 0xca, 0xec, 0x24, 0x48, 0xc5, 0x6f, 0x24, 0xc8, 0xb6, 0xbc, 0x5e,
	0x80, 0xdd, 0x53, 0xec, 0xb8, 0x38, 0x44, 0x7b, 0xb0, 0xda, 0xe7, 0x27, 0x45, 0xd2, 0xa4, 0xdd,
	0xcc, 0xbe, 0x52, 0x8a, 0x85, 0x29, 0x55, 0xdb, 0xa6, 0x60, 0x5a, 0x33, 0x1e, 0x3a, 0x01, 0xb9,
	0x4b, 0x7c, 0xdf, 0xa3, 0xf6, 0x98, 0x50, 0x6c, 0x0f, 0xbc, 0x88, 0x2a, 0x49, 0xae, 0xdd, 0x59,
	0xd2, 0xd6, 0x38, 0xad, 0x43, 0x28, 0xae, 0x7b, 0x11, 0xb5, 0x36, 0xba, 0x31, 0x5c, 0xfc, 0x35,
	0x05, 0xeb, 0xd7, 0xe1, 0xd1, 0x7b, 0x90, 0xf1, 0x1d, 0x2f, 0xb0, 0xfb, 0xd8, 0xeb, 0xf5, 0x29,
	0xcf, 0x26, 0x65, 0x01, 0x33, 0x9d, 0x72, 0x0b, 0xda, 0x82, 0xb4, 0x45, 0x46, 0x81, 0xcb, 0xff,
	0x2c, 0x6d, 0x09, 0x80, 0x9e, 0xc0, 0xfd, 0x00, 0x7f, 0x45, 0xed, 0x61, 0x48, 0xc8, 0x97, 0x76,
	0x97, 0x04, 0x94, 0xa1, 0xbe, 0x13, 0xf5, 0x95, 0x94, 0x26, 0xed, 0x66, 0xad, 0x2d, 0xe6, 0x36,
	0x99, 0xb7, 0x26, 0x9c, 0xa7, 0x4e, 0xd4, 0x47, 0x26, 0x93, 0xd1, 0x17, 0x24, 0xbc, 0xb0, 0x23,
	0xdc, 0xa5, 0x1e, 0x09, 0x6c, 0x4a, 0xec, 0x90, 0x10, 0xaa, 0xac, 0x68, 0xa9, 0xdd, 0xcc, 0x7e,
	0x7e, 0xa9, 0x96, 0x06, 0x0e, 0x2f, 0x06, 0xd8, 0x20, 0x2e, 0x66, 0x11, 0xb9, 0xb2, 0x25, 0x84,
	0x6d, 0x62, 0x11, 0x42, 0xd1, 0x0e, 0xc0, 0x3c, 0xa2, 0xe7, 0x2a, 0x69, 0x9e, 0xfe, 0xfa, 0xcc,
	0xa2, 0xbb, 0xe8, 0x21, 0xe4, 0x46, 0x43, 0xd7, 0xa1, 0xd8, 0x0e, 0x46, 0xfe, 0x39, 0x0e, 0x95,
	0x55, 0xce, 0xc8, 0x0a, 0xa3, 0xc1, 0x6d, 0xe8, 0x63, 0xc8, 0x0f, 0x43, 0x3c, 0xb6, 0x97, 0x53,
	0xe3, 0xe5, 0xdc, 0xe1, 0xe5, 0x6c, 0x33, 0x82, 0x11, 0x4b, 0x80, 0x17, 0xf4, 0x10, 0x72, 0x3e,
	0x8e, 0x22, 0xa7, 0x87, 0xed, 0x2e, 0x19, 0x05, 0x54, 0x59, 0x13, 0xf1, 0x67, 0xc6, 0x1a, 0xb3,
	0xa1, 0xf7, 0x61, 0x8e, 0x45, 0xa9, 0xeb, 0x3c, 0x64, 0x66, 0x66, 0xe3, 0x65, 0x3c, 0x02, 0x74,
	0xbb, 0x9f, 0x0a, 0x70, 0xa2, 0xbc, 0xdc, 0xca, 0xe2, 0x47, 0x00, 0x37, 0x8d, 0x41, 0x32, 0xa4,
	0x8e, 0x3c, 0xb1, 0x48, 0x69, 0x8b, 0x1d, 0xd9, 0xcc, 0xc6, 0xce, 0x60, 0x84, 0xf9, 0xcc, 0xb2,
	0x96, 0x00, 0xc5, 0xef, 0x24, 0xd8, 0x88, 0xef, 0x06, 0x23, 0x86, 0x7c, 0xb8, 0x42, 0x2c, 0x00,
	0xaa, 0xc1, 0xe6, 0xf9, 0x80, 0x74, 0x2f, 0xec, 0xa1, 0x13, 0x52, 0x3b, 0xc2, 0x94, 0xb5, 0x36,
	0xf9, 0xc6, 0x3d, 0x35, 0x9d, 0x90, 0xb6, 0x30, 0xd5, 0x8f, 0xac, 0x0d, 0x2e, 0x99, 0x63, 0x17,
	0x3d, 0x86, 0xb4, 0x47, 0xb1, 0x1f, 0xf1, 0x7d, 0xf8, 0xaf, 0x25, 0xd5, 0x29, 0xf6, 0x2d, 0xc1,
	0x2d, 0xd6, 0x17, 0x33, 0x64, 0x0e, 0xf4, 0x00, 0xd6, 0xa9, 0xe7, 0xe3, 0x88, 0x3a, 0xfe, 0x70,
	0xb6, 0x9d, 0x37, 0x06, 0xe6, 0x8d, 0xbc, 0x5e, 0xe0, 0xd0, 0x51, 0x38, 0x2f, 0xf6, 0xc6, 0x50,
	0x7c, 0x02, 0xeb, 0xd7, 0xf9, 0xb1, 0x52, 0xc5, 0x84, 0x58, 0x90, 0x9c, 0x25, 0x00, 0x42, 0xb0,
	0xc2, 0xa7, 0x2c, 0xb4, 0xfc, 0x5c, 0xdc, 0x87, 0xe4, 0xa9, 0x85, 0xb6, 0xd9, 0x0d, 0x5d, 0xb8,
	0x13, 0x33, 0x34, 0x6f, 0x19, 0x9d, 0xdf, 0x07, 0x0e, 0x8a, 0x7f, 0x4b, 0xb0, 0xc2, 0x72, 0xfe,
	0x3f, 0x99, 0xbb, 0x28, 0x73, 0xd1, 0x1e, 0xac, 0xb0, 0x8e, 0xf0, 0x1e, 0x6d, 0xec, 0x3f, 0x58,
	0xea, 0x91, 0x78, 0x31, 0x1a, 0x51, 0xaf, 0xfd, 0x72, 0x88, 0x2d, 0xce, 0x44, 0x79, 0x58, 0x13,
	0xb3, 0xf1, 0x5c, 0x65, 0x85, 0x27, 0x7d, 0x87, 0x63, 0xfd, 0x2d, 0x63, 0x4b, 0xbf, 0xe3, 0xd8,
	0x62, 0xfd, 0x5e, 0x5d, 0xea, 0x77, 0xb1, 0x04, 0xd9, 0x8e, 0x33, 0xf0, 0x5c, 0x87, 0x92, 0xb0,
	0x85, 0x29, 0x52, 0x01, 0xc6, 0x73, 0x1c, 0x29, 0x92, 0x96, 0xda, 0xcd, 0x5a, 0x0b, 0x96, 0x0f,
	0x7f, 0x97, 0x20, 0x53, 0xe5, 0xe9, 0x1d, 0x3d, 0x1d, 0x38, 0x3d, 0x54, 0x81, 0x7b, 0xd5, 0x7a,
	0xb3, 0xf6, 0xcc, 0xd6, 0x8f, 0xec, 0xa7, 0xf5, 0xc3, 0x13, 0xfb, 0xb9, 0xf1, 0xcc, 0x68, 0x7e,
	0x6a, 0xc8, 0x89, 0xc2, 0xf6, 0x64, 0xaa, 0xa1, 0x05, 0xee, 0xf3, 0xe0, 0x22, 0x20, 0x2f, 0x02,
	0x54, 0x86, 0xad, 0xb8, 0xe4, 0xb0, 0xda, 0x3a, 0x36, 0xda, 0xb2, 0x54, 0xb8, 0x37, 0x99, 0x6a,
	0x9b, 0x0b, 0x8a, 0xc3, 0xf3, 0x08, 0x07, 0xf4, 0xb6, 0xa0, 0xd6, 0x6c, 0x34, 0xf4, 0xb6, 0x9c,
	0xbc, 0x25, 0x10, 0xab, 0x86, 0x3e, 0x80, 0xcd, 0xb8, 0xc0, 0xd0, 0xeb, 0x72, 0xaa, 0x80, 0x26,
	0x53, 0x6d, 0x63, 0x81, 0x6d, 0x78, 0x83, 0xc2, 0xda, 0xd7, 0x3f, 0xa8, 0x89, 0x9f, 0x7e, 0x54,
	0x25, 0x56, 0x59, 0x2e, 0x36, 0x1f, 0xf4, 0x08, 0xee, 0xb7, 0xf4, 0x13, 0xe3, 0xf8, 0xc8, 0x6e,
	0xb4, 0x4e, 0xec, 0xf6, 0xe7, 0xe6, 0xf1, 0x42, 0x75, 0x77, 0x27, 0x53, 0x2d, 0x33, 0x2b, 0xe9,
	0x6d, 0x6c, 0xd3, 0x3a, 0xee, 0x34, 0xdb, 0xc7, 0xb2, 0x24, 0xd8, 0x66, 0x88, 0xd9, 0x4b, 0xcf,
	0xd9, 0x7b, 0x90, 0x7f, 0x03, 0xfb, 0xba, 0xb0, 0xcd, 0xc9, 0x54, 0xcb, 0x99, 0x21, 0x16, 0x2f,
	0x3d, 0x57, 0x94, 0x40, 0xb9, 0xad, 0x68, 0x9a, 0xcd, 0xd6, 0x61, 0x5d, 0xd6, 0x0a, 0xf2, 0x64,
	0xaa, 0x65, 0xcd, 0x90, 0x0c, 0x49, 0xe4, 0x0c, 0x18, 0xff, 0xa6, 0xb2, 0xea, 0x2f, 0xd2, 0xab,
	0xbf, 0xd4, 0xc4, 0xab, 0x4b, 0x55, 0x7a, 0x7d, 0xa9, 0x4a, 0x7f, 0x5e, 0xaa, 0xd2, 0xb7, 0x57,
	0x6a, 0xe2, 0xf5, 0x95, 0x9a, 0xf8, 0xe3, 0x4a, 0x4d, 0xc0, 0x66, 0x97, 0xf8, 0xf1, 0x6d, 0xaa,
	0x02, 0x8b, 0x10, 0x99, 0xec, 0x4b, 0x67, 0x4a, 0x5f, 0xec, 0x0c, 0xbc, 0xf3, 0xd0, 0x09, 0x3d,
	0x1c, 0x95, 0x7b, 0xa4, 0xcc, 0x52, 0x22, 0x41, 0x99, 0x09, 0x3e, 0x61, 0x3f, 0xdf, 0x27, 0x53,
	0x7a, 0xfb, 0xb3, 0x9f, 0x93, 0x39, 0x9d, 0x85, 0xe0, 0xc2, 0x52, 0xa7, 0xf2, 0x9b, 0xc0, 0x67,
	0x1c, 0x9f, 0x75, 0x2a, 0x97, 0xc9, 0x7c, 0x0c, 0x9f, 0x9d, 0x98, 0xd5, 0x06, 0xa6, 0x8e, 0xeb,
	0x50, 0xe7, 0x9f, 0xe4, 0x5d, 0xe6, 0x3b, 0x38, 0xe0, 0xce, 0x83, 0x83, 0x4e, 0xe5, 0x7c, 0x95,
	0x7f, 0x65, 0x1f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x59, 0xb4, 0x04, 0xa7, 0x07, 0x00,
	0x00,
}

func (m *SignedHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CommitVoteList != nil {
		{
			size, err := m.CommitVoteList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Header != nil {
		{
			size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BTPHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTPHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTPHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextProofContext) > 0 {
		i -= len(m.NextProofContext)
		copy(dAtA[i:], m.NextProofContext)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NextProofContext)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MessageRoot) > 0 {
		i -= len(m.MessageRoot)
		copy(dAtA[i:], m.MessageRoot)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.MessageRoot)))
		i--
		dAtA[i] = 0x4a
	}
	if m.MessageCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MessageCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PrevNetworkSectionHash) > 0 {
		i -= len(m.PrevNetworkSectionHash)
		copy(dAtA[i:], m.PrevNetworkSectionHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PrevNetworkSectionHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdateNumber != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UpdateNumber))
		i--
		dAtA[i] = 0x30
	}
	if m.NetworkId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NetworkId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NetworkSectionToRoot) > 0 {
		for iNdEx := len(m.NetworkSectionToRoot) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetworkSectionToRoot[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NextProofContextHash) > 0 {
		i -= len(m.NextProofContextHash)
		copy(dAtA[i:], m.NextProofContextHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.NextProofContextHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Round != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.MainHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MainHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MerkleNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MerkleNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MerkleNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Dir != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Dir))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitVoteList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitVoteList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitVoteList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Items != nil {
		{
			size, err := m.Items.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockPartSetId != nil {
		{
			size, err := m.BlockPartSetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Round != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitVoteItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitVoteItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitVoteItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PartSetID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartSetID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartSetID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Count != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HR) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HR) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HR) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Rount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Rount))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.BlockPartSetId != nil {
		{
			size, err := m.BlockPartSetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BlockId) > 0 {
		i -= len(m.BlockId)
		copy(dAtA[i:], m.BlockId)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BlockId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Round != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Validators[iNdEx])
			copy(dAtA[i:], m.Validators[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Validators[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CommitVoteList != nil {
		l = m.CommitVoteList.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *BTPHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MainHeight != 0 {
		n += 1 + sovTypes(uint64(m.MainHeight))
	}
	if m.Round != 0 {
		n += 1 + sovTypes(uint64(m.Round))
	}
	l = len(m.NextProofContextHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.NetworkSectionToRoot) > 0 {
		for _, e := range m.NetworkSectionToRoot {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.NetworkId != 0 {
		n += 1 + sovTypes(uint64(m.NetworkId))
	}
	if m.UpdateNumber != 0 {
		n += 1 + sovTypes(uint64(m.UpdateNumber))
	}
	l = len(m.PrevNetworkSectionHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MessageCount != 0 {
		n += 1 + sovTypes(uint64(m.MessageCount))
	}
	l = len(m.MessageRoot)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.NextProofContext)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *MerkleNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dir != 0 {
		n += 1 + sovTypes(uint64(m.Dir))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CommitVoteList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovTypes(uint64(m.Round))
	}
	if m.BlockPartSetId != nil {
		l = m.BlockPartSetId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Items != nil {
		l = m.Items.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CommitVoteItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PartSetID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovTypes(uint64(m.Count))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *HR) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if m.Rount != 0 {
		n += 1 + sovTypes(uint64(m.Rount))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovTypes(uint64(m.Round))
	}
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	l = len(m.BlockId)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BlockPartSetId != nil {
		l = m.BlockPartSetId.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	return n
}

func (m *ValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, b := range m.Validators {
			l = len(b)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BTPHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitVoteList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommitVoteList == nil {
				m.CommitVoteList = &CommitVoteList{}
			}
			if err := m.CommitVoteList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTPHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTPHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTPHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainHeight", wireType)
			}
			m.MainHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProofContextHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextProofContextHash = append(m.NextProofContextHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NextProofContextHash == nil {
				m.NextProofContextHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkSectionToRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetworkSectionToRoot = append(m.NetworkSectionToRoot, &MerkleNode{})
			if err := m.NetworkSectionToRoot[len(m.NetworkSectionToRoot)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkId", wireType)
			}
			m.NetworkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateNumber", wireType)
			}
			m.UpdateNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevNetworkSectionHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevNetworkSectionHash = append(m.PrevNetworkSectionHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevNetworkSectionHash == nil {
				m.PrevNetworkSectionHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageCount", wireType)
			}
			m.MessageCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageRoot = append(m.MessageRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageRoot == nil {
				m.MessageRoot = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProofContext", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextProofContext = append(m.NextProofContext[:0], dAtA[iNdEx:postIndex]...)
			if m.NextProofContext == nil {
				m.NextProofContext = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MerkleNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MerkleNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MerkleNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dir", wireType)
			}
			m.Dir = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dir |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitVoteList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitVoteList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitVoteList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockPartSetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockPartSetId == nil {
				m.BlockPartSetId = &PartSetID{}
			}
			if err := m.BlockPartSetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = &CommitVoteItem{}
			}
			if err := m.Items.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitVoteItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitVoteItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitVoteItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartSetID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartSetID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartSetID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HR) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rount", wireType)
			}
			m.Rount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SignedMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockId = append(m.BlockId[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockId == nil {
				m.BlockId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockPartSetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockPartSetId == nil {
				m.BlockPartSetId = &PartSetID{}
			}
			if err := m.BlockPartSetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, make([]byte, postIndex-iNdEx))
			copy(m.Validators[len(m.Validators)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
