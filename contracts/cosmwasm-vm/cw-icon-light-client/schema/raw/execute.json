{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "create_client"
      ],
      "properties": {
        "create_client": {
          "type": "object",
          "required": [
            "client_id",
            "client_state",
            "consensus_state"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "client_state": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "consensus_state": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_client"
      ],
      "properties": {
        "update_client": {
          "type": "object",
          "required": [
            "client_id",
            "signed_header"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "signed_header": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_membership"
      ],
      "properties": {
        "verify_membership": {
          "type": "object",
          "required": [
            "client_id",
            "delay_block_period",
            "delay_time_period",
            "height",
            "message_bytes",
            "path",
            "proofs"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "delay_block_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "delay_time_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "message_bytes": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "path": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "proofs": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_non_membership"
      ],
      "properties": {
        "verify_non_membership": {
          "type": "object",
          "required": [
            "client_id",
            "delay_block_period",
            "delay_time_period",
            "height",
            "path",
            "proofs"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "delay_block_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "delay_time_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "path": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "proofs": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "upgrade_client"
      ],
      "properties": {
        "upgrade_client": {
          "type": "object",
          "required": [
            "proof_upgrade_client",
            "proof_upgrade_consensus_state",
            "upgraded_client_state",
            "upgraded_consensus_state"
          ],
          "properties": {
            "proof_upgrade_client": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "proof_upgrade_consensus_state": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "upgraded_client_state": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "upgraded_consensus_state": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_channel"
      ],
      "properties": {
        "verify_channel": {
          "type": "object",
          "required": [
            "endpoint",
            "message_info",
            "verify_channel_state"
          ],
          "properties": {
            "endpoint": {
              "$ref": "#/definitions/IbcEndpoint"
            },
            "message_info": {
              "$ref": "#/definitions/MessageInfo"
            },
            "verify_channel_state": {
              "$ref": "#/definitions/VerifyChannelState"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "misbehaviour"
      ],
      "properties": {
        "misbehaviour": {
          "type": "object",
          "required": [
            "client_id",
            "misbehaviour"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "misbehaviour": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_open_confirm"
      ],
      "properties": {
        "verify_open_confirm": {
          "type": "object",
          "required": [
            "client_id",
            "expected_response",
            "verify_connection_state"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "expected_response": {
              "$ref": "#/definitions/OpenConfirmResponse"
            },
            "verify_connection_state": {
              "$ref": "#/definitions/VerifyConnectionState"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "timeout_on_c_lose"
      ],
      "properties": {
        "timeout_on_c_lose": {
          "type": "object",
          "required": [
            "client_id",
            "next_seq_recv_verification_result",
            "verify_channel_state"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "next_seq_recv_verification_result": {
              "$ref": "#/definitions/LightClientPacketMessage"
            },
            "verify_channel_state": {
              "$ref": "#/definitions/VerifyChannelState"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_packet_data"
      ],
      "properties": {
        "verify_packet_data": {
          "type": "object",
          "required": [
            "client_id",
            "packet_data",
            "verify_packet_data"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "packet_data": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "verify_packet_data": {
              "$ref": "#/definitions/VerifyPacketData"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_packet_acknowledgement"
      ],
      "properties": {
        "verify_packet_acknowledgement": {
          "type": "object",
          "required": [
            "client_id",
            "packet_data",
            "verify_packet_acknowledge"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "packet_data": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "verify_packet_acknowledge": {
              "$ref": "#/definitions/VerifyPacketAcknowledgement"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_connection_open_try"
      ],
      "properties": {
        "verify_connection_open_try": {
          "$ref": "#/definitions/VerifyConnectionPayload_for_OpenTryResponse"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "verify_connection_open_ack"
      ],
      "properties": {
        "verify_connection_open_ack": {
          "$ref": "#/definitions/VerifyConnectionPayload_for_OpenAckResponse"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "IbcEndpoint": {
      "type": "object",
      "required": [
        "channel_id",
        "port_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "port_id": {
          "type": "string"
        }
      }
    },
    "LightClientPacketMessage": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "verify_packet_receipt_absence"
          ],
          "properties": {
            "verify_packet_receipt_absence": {
              "type": "object",
              "required": [
                "height",
                "packet_data",
                "prefix",
                "proof",
                "receipt_path",
                "root"
              ],
              "properties": {
                "height": {
                  "type": "string"
                },
                "packet_data": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "proof": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "receipt_path": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "root": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "verify_next_sequence_recv"
          ],
          "properties": {
            "verify_next_sequence_recv": {
              "type": "object",
              "required": [
                "height",
                "packet_data",
                "prefix",
                "proof",
                "root",
                "seq_recv_path",
                "sequence"
              ],
              "properties": {
                "height": {
                  "type": "string"
                },
                "packet_data": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "proof": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "root": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "seq_recv_path": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  }
                },
                "sequence": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MessageInfo": {
      "type": "object",
      "required": [
        "funds",
        "sender"
      ],
      "properties": {
        "funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "sender": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false
    },
    "OpenAckResponse": {
      "type": "object",
      "required": [
        "conn_id",
        "counterparty_client_id",
        "counterparty_connection_id",
        "counterparty_prefix",
        "version"
      ],
      "properties": {
        "conn_id": {
          "type": "string"
        },
        "counterparty_client_id": {
          "type": "string"
        },
        "counterparty_connection_id": {
          "type": "string"
        },
        "counterparty_prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "version": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "OpenConfirmResponse": {
      "type": "object",
      "required": [
        "conn_id",
        "counterparty_client_id",
        "counterparty_connection_id",
        "counterparty_prefix"
      ],
      "properties": {
        "conn_id": {
          "type": "string"
        },
        "counterparty_client_id": {
          "type": "string"
        },
        "counterparty_connection_id": {
          "type": "string"
        },
        "counterparty_prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "OpenTryResponse": {
      "type": "object",
      "required": [
        "client_id",
        "conn_id",
        "counterparty_client_id",
        "counterparty_connection_id",
        "counterparty_prefix",
        "delay_period",
        "versions"
      ],
      "properties": {
        "client_id": {
          "type": "string"
        },
        "conn_id": {
          "type": "string"
        },
        "counterparty_client_id": {
          "type": "string"
        },
        "counterparty_connection_id": {
          "type": "string"
        },
        "counterparty_prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "delay_period": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VerifyChannelState": {
      "type": "object",
      "required": [
        "counterparty_chan_end_path",
        "counterparty_prefix",
        "expected_counterparty_channel_end",
        "proof",
        "proof_height",
        "root"
      ],
      "properties": {
        "counterparty_chan_end_path": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "counterparty_prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "expected_counterparty_channel_end": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof_height": {
          "type": "string"
        },
        "root": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "VerifyClientConsensusState": {
      "type": "object",
      "required": [
        "conesenus_state_path",
        "consensus_state_proof",
        "counterparty_prefix",
        "expected_conesenus_state",
        "proof_height",
        "root"
      ],
      "properties": {
        "conesenus_state_path": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "consensus_state_proof": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "counterparty_prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "expected_conesenus_state": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof_height": {
          "type": "string"
        },
        "root": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "VerifyClientFullState": {
      "type": "object",
      "required": [
        "client_state_path",
        "client_state_proof",
        "counterparty_prefix",
        "expected_client_state",
        "proof_height",
        "root"
      ],
      "properties": {
        "client_state_path": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "client_state_proof": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "counterparty_prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "expected_client_state": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof_height": {
          "type": "string"
        },
        "root": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "VerifyConnectionPayload_for_OpenAckResponse": {
      "type": "object",
      "required": [
        "client_id",
        "expected_response",
        "verify_client_consensus_state",
        "verify_client_full_state",
        "verify_connection_state"
      ],
      "properties": {
        "client_id": {
          "type": "string"
        },
        "expected_response": {
          "$ref": "#/definitions/OpenAckResponse"
        },
        "verify_client_consensus_state": {
          "$ref": "#/definitions/VerifyClientConsensusState"
        },
        "verify_client_full_state": {
          "$ref": "#/definitions/VerifyClientFullState"
        },
        "verify_connection_state": {
          "$ref": "#/definitions/VerifyConnectionState"
        }
      },
      "additionalProperties": false
    },
    "VerifyConnectionPayload_for_OpenTryResponse": {
      "type": "object",
      "required": [
        "client_id",
        "expected_response",
        "verify_client_consensus_state",
        "verify_client_full_state",
        "verify_connection_state"
      ],
      "properties": {
        "client_id": {
          "type": "string"
        },
        "expected_response": {
          "$ref": "#/definitions/OpenTryResponse"
        },
        "verify_client_consensus_state": {
          "$ref": "#/definitions/VerifyClientConsensusState"
        },
        "verify_client_full_state": {
          "$ref": "#/definitions/VerifyClientFullState"
        },
        "verify_connection_state": {
          "$ref": "#/definitions/VerifyConnectionState"
        }
      },
      "additionalProperties": false
    },
    "VerifyConnectionState": {
      "type": "object",
      "required": [
        "counterparty_conn_end_path",
        "counterparty_prefix",
        "expected_counterparty_connection_end",
        "proof",
        "proof_height",
        "root"
      ],
      "properties": {
        "counterparty_conn_end_path": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "counterparty_prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "expected_counterparty_connection_end": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof_height": {
          "type": "string"
        },
        "root": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "VerifyPacketAcknowledgement": {
      "type": "object",
      "required": [
        "ack",
        "ack_path",
        "height",
        "prefix",
        "proof",
        "root"
      ],
      "properties": {
        "ack": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "ack_path": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "height": {
          "type": "string"
        },
        "prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "root": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    },
    "VerifyPacketData": {
      "type": "object",
      "required": [
        "commitment",
        "commitment_path",
        "height",
        "prefix",
        "proof",
        "root"
      ],
      "properties": {
        "commitment": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "commitment_path": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "height": {
          "type": "string"
        },
        "prefix": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "proof": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "root": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        }
      },
      "additionalProperties": false
    }
  }
}
