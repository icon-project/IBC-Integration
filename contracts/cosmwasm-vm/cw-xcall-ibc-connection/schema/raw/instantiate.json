{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This is a Rust struct representing a message to instantiate a contract with timeout height and IBC host address.\n\nProperties:\n\n* `timeout_height`: `timeout_height` is a field of type `u64` (unsigned 64-bit integer) in the `InstantiateMsg` struct. It represents the block height at which the transaction will timeout if it has not been included in a block by that height. This is used to prevent transactions from being * `ibc_host`: `ibc_host` is a field of type `Addr` in the `InstantiateMsg` struct. It likely represents the address of the IBC host that the message is being sent to. However, without more context it's difficult to say for sure.",
  "type": "object",
  "required": [
    "denom",
    "ibc_host",
    "port_id",
    "xcall_address"
  ],
  "properties": {
    "denom": {
      "type": "string"
    },
    "ibc_host": {
      "$ref": "#/definitions/Addr"
    },
    "port_id": {
      "type": "string"
    },
    "xcall_address": {
      "$ref": "#/definitions/Addr"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    }
  }
}
