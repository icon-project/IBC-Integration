{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "set_admin"
      ],
      "properties": {
        "set_admin": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_x_call_host"
      ],
      "properties": {
        "set_x_call_host": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "send_message"
      ],
      "properties": {
        "send_message": {
          "type": "object",
          "required": [
            "msg",
            "sn",
            "to"
          ],
          "properties": {
            "msg": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "sn": {
              "type": "integer",
              "format": "int64"
            },
            "to": {
              "$ref": "#/definitions/NetId"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "configure_connection"
      ],
      "properties": {
        "configure_connection": {
          "type": "object",
          "required": [
            "client_id",
            "connection_id",
            "counterparty_nid",
            "counterparty_port_id",
            "timeout_height"
          ],
          "properties": {
            "client_id": {
              "type": "string"
            },
            "connection_id": {
              "type": "string"
            },
            "counterparty_nid": {
              "$ref": "#/definitions/NetId"
            },
            "counterparty_port_id": {
              "type": "string"
            },
            "timeout_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_fees"
      ],
      "properties": {
        "claim_fees": {
          "type": "object",
          "required": [
            "address",
            "nid"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "nid": {
              "$ref": "#/definitions/NetId"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_fees"
      ],
      "properties": {
        "set_fees": {
          "type": "object",
          "required": [
            "ack_fee",
            "nid",
            "packet_fee"
          ],
          "properties": {
            "ack_fee": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "nid": {
              "$ref": "#/definitions/NetId"
            },
            "packet_fee": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ibc_channel_open"
      ],
      "properties": {
        "ibc_channel_open": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/IbcChannelOpenMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ibc_channel_connect"
      ],
      "properties": {
        "ibc_channel_connect": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/IbcChannelConnectMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ibc_channel_close"
      ],
      "properties": {
        "ibc_channel_close": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/IbcChannelCloseMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ibc_packet_receive"
      ],
      "properties": {
        "ibc_packet_receive": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/IbcPacketReceiveMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ibc_packet_ack"
      ],
      "properties": {
        "ibc_packet_ack": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/IbcPacketAckMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ibc_packet_timeout"
      ],
      "properties": {
        "ibc_packet_timeout": {
          "type": "object",
          "required": [
            "msg"
          ],
          "properties": {
            "msg": {
              "$ref": "#/definitions/IbcPacketTimeoutMsg"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "IbcAcknowledgement": {
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "IbcChannel": {
      "description": "IbcChannel defines all information on a channel. This is generally used in the hand-shake process, but can be queried directly.",
      "type": "object",
      "required": [
        "connection_id",
        "counterparty_endpoint",
        "endpoint",
        "order",
        "version"
      ],
      "properties": {
        "connection_id": {
          "description": "The connection upon which this channel was created. If this is a multi-hop channel, we only expose the first hop.",
          "type": "string"
        },
        "counterparty_endpoint": {
          "$ref": "#/definitions/IbcEndpoint"
        },
        "endpoint": {
          "$ref": "#/definitions/IbcEndpoint"
        },
        "order": {
          "$ref": "#/definitions/IbcOrder"
        },
        "version": {
          "description": "Note: in ibcv3 this may be \"\", in the IbcOpenChannel handshake messages",
          "type": "string"
        }
      }
    },
    "IbcChannelCloseMsg": {
      "description": "The message that is passed into `ibc_channel_close`",
      "oneOf": [
        {
          "description": "The ChanCloseInit step from https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#channel-lifecycle-management",
          "type": "object",
          "required": [
            "close_init"
          ],
          "properties": {
            "close_init": {
              "type": "object",
              "required": [
                "channel"
              ],
              "properties": {
                "channel": {
                  "$ref": "#/definitions/IbcChannel"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The ChanCloseConfirm step from https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#channel-lifecycle-management",
          "type": "object",
          "required": [
            "close_confirm"
          ],
          "properties": {
            "close_confirm": {
              "type": "object",
              "required": [
                "channel"
              ],
              "properties": {
                "channel": {
                  "$ref": "#/definitions/IbcChannel"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcChannelConnectMsg": {
      "description": "The message that is passed into `ibc_channel_connect`",
      "oneOf": [
        {
          "description": "The ChanOpenAck step from https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#channel-lifecycle-management",
          "type": "object",
          "required": [
            "open_ack"
          ],
          "properties": {
            "open_ack": {
              "type": "object",
              "required": [
                "channel",
                "counterparty_version"
              ],
              "properties": {
                "channel": {
                  "$ref": "#/definitions/IbcChannel"
                },
                "counterparty_version": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The ChanOpenConfirm step from https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#channel-lifecycle-management",
          "type": "object",
          "required": [
            "open_confirm"
          ],
          "properties": {
            "open_confirm": {
              "type": "object",
              "required": [
                "channel"
              ],
              "properties": {
                "channel": {
                  "$ref": "#/definitions/IbcChannel"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcChannelOpenMsg": {
      "description": "The message that is passed into `ibc_channel_open`",
      "oneOf": [
        {
          "description": "The ChanOpenInit step from https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#channel-lifecycle-management",
          "type": "object",
          "required": [
            "open_init"
          ],
          "properties": {
            "open_init": {
              "type": "object",
              "required": [
                "channel"
              ],
              "properties": {
                "channel": {
                  "$ref": "#/definitions/IbcChannel"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "The ChanOpenTry step from https://github.com/cosmos/ibc/tree/master/spec/core/ics-004-channel-and-packet-semantics#channel-lifecycle-management",
          "type": "object",
          "required": [
            "open_try"
          ],
          "properties": {
            "open_try": {
              "type": "object",
              "required": [
                "channel",
                "counterparty_version"
              ],
              "properties": {
                "channel": {
                  "$ref": "#/definitions/IbcChannel"
                },
                "counterparty_version": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IbcEndpoint": {
      "type": "object",
      "required": [
        "channel_id",
        "port_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "port_id": {
          "type": "string"
        }
      }
    },
    "IbcOrder": {
      "description": "IbcOrder defines if a channel is ORDERED or UNORDERED Values come from https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/core/channel/v1/channel.proto#L69-L80 Naming comes from the protobuf files and go translations.",
      "type": "string",
      "enum": [
        "ORDER_UNORDERED",
        "ORDER_ORDERED"
      ]
    },
    "IbcPacket": {
      "type": "object",
      "required": [
        "data",
        "dest",
        "sequence",
        "src",
        "timeout"
      ],
      "properties": {
        "data": {
          "description": "The raw data sent from the other side in the packet",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "dest": {
          "description": "identifies the channel and port on the receiving chain.",
          "allOf": [
            {
              "$ref": "#/definitions/IbcEndpoint"
            }
          ]
        },
        "sequence": {
          "description": "The sequence number of the packet on the given channel",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "src": {
          "description": "identifies the channel and port on the sending chain.",
          "allOf": [
            {
              "$ref": "#/definitions/IbcEndpoint"
            }
          ]
        },
        "timeout": {
          "$ref": "#/definitions/IbcTimeout"
        }
      }
    },
    "IbcPacketAckMsg": {
      "description": "The message that is passed into `ibc_packet_ack`",
      "type": "object",
      "required": [
        "acknowledgement",
        "original_packet",
        "relayer"
      ],
      "properties": {
        "acknowledgement": {
          "$ref": "#/definitions/IbcAcknowledgement"
        },
        "original_packet": {
          "$ref": "#/definitions/IbcPacket"
        },
        "relayer": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "IbcPacketReceiveMsg": {
      "description": "The message that is passed into `ibc_packet_receive`",
      "type": "object",
      "required": [
        "packet",
        "relayer"
      ],
      "properties": {
        "packet": {
          "$ref": "#/definitions/IbcPacket"
        },
        "relayer": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "IbcPacketTimeoutMsg": {
      "description": "The message that is passed into `ibc_packet_timeout`",
      "type": "object",
      "required": [
        "packet",
        "relayer"
      ],
      "properties": {
        "packet": {
          "$ref": "#/definitions/IbcPacket"
        },
        "relayer": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "IbcTimeout": {
      "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
      "type": "object",
      "properties": {
        "block": {
          "anyOf": [
            {
              "$ref": "#/definitions/IbcTimeoutBlock"
            },
            {
              "type": "null"
            }
          ]
        },
        "timestamp": {
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "IbcTimeoutBlock": {
      "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
      "type": "object",
      "required": [
        "height",
        "revision"
      ],
      "properties": {
        "height": {
          "description": "block height after which the packet times out. the height within the given revision",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "revision": {
          "description": "the version that the client is currently on (eg. after reseting the chain this could increment 1 as height drops to 0)",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "NetId": {
      "type": "string"
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
