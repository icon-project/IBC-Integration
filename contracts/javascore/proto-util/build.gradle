version = '0.1.0'

apply plugin: 'java-library'
apply plugin: 'java'

optimizedJar.enabled = false

dependencies {
    compileOnly("foundation.icon:javaee-api:$javaeeVersion")
    implementation("foundation.icon:javaee-scorex:$scorexVersion")
    implementation project(':score-util')

    implementation("com.squareup:javapoet:1.12.1")
    implementation("io.protostuff:protostuff-parser:3.1.40");
    compileOnly("foundation.icon:javaee-score-client:$scoreClientVersion")
    annotationProcessor("foundation.icon:javaee-score-client:$scoreClientVersion")
    compileOnly("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    compileOnly("foundation.icon:icon-sdk:$iconsdkVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$jupiterApiVersion")
    testImplementation("org.junit.jupiter:junit-jupiter-params:$jupiterParamsVersion")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$jupiterEngineVersion")
    testImplementation("foundation.icon:javaee-unittest:$javaeeUnittestVersion")
}

ext {
   javaMainClass = "icon.score.proto.ProtoGen"
}

task generate(type: JavaExec) {
    group = "Execution"
    description = "Generate proto files"
    classpath = sourceSets.main.runtimeClasspath
    main = javaMainClass
}

test {
    useJUnitPlatform()
}
