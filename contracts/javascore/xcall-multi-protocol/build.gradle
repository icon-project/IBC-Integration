version = '0.1.0'

dependencies {
    implementation project(':lib')
    implementation project(':score-util')
    testImplementation 'foundation.icon:javaee-unittest:0.11.1'
    testImplementation project(':test-lib')
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

optimizedJar {
    dependsOn(project(':lib').jar)
    dependsOn(project(':score-util').jar)
    mainClassName = 'foundation.icon.btp.xcall.CallServiceImpl'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
deployJar {
    endpoints {
        berlin {
            uri = 'https://berlin.net.solidwallet.io/api/v3'
            nid = 0x7
        }
        lisbon {
            uri = 'https://lisbon.net.solidwallet.io/api/v3'
            nid = 0x2
        }
        local {
            uri = 'http://localhost:9082/api/v3'
            nid = 0x3
        }
        uat {
            uri = project.findProperty('uat.host') as String
            nid = property('uat.nid') as Integer
            to = "$xCallMultiProtocol"?:null
        }
    }
    keystore = rootProject.hasProperty('keystoreName') ? "$keystoreName" : ''
    password = rootProject.hasProperty('keystorePass') ? "$keystorePass" : ''
    parameters {
        arg('networkId', '0x1.ICON')
    }
}


task integrationTest(type: Test) {
    useJUnitPlatform()

    rootProject.allprojects {
        if (it.getTasks().findByName('optimizedJar')) {
            dependsOn(it.getTasks().getByName('optimizedJar'))
        }
    }

    options {
        testLogging.showStandardStreams = true
        description = 'Runs integration tests.'
        group = 'verification'

        testClassesDirs = sourceSets.intTest.output.classesDirs
        classpath = sourceSets.intTest.runtimeClasspath

        systemProperty "java", optimizedJar.outputJarName
    }

}
