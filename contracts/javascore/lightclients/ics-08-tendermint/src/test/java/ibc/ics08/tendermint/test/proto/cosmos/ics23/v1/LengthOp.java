// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/ics23/v1/proofs.proto

package com.cosmos.ics23.v1;

/**
 * <pre>
 **
 *LengthOp defines how to process the key and value of the LeafOp
 *to include length information. After encoding the length with the given
 *algorithm, the length will be prepended to the key and value bytes.
 *(Each one with it's own encoded length)
 * </pre>
 *
 * Protobuf enum {@code cosmos.ics23.v1.LengthOp}
 */
public enum LengthOp
    implements com.google.protobuf.Internal.EnumLite {
  /**
   * <pre>
   * NO_PREFIX don't include any length info
   * </pre>
   *
   * <code>NO_PREFIX = 0;</code>
   */
  NO_PREFIX(0),
  /**
   * <pre>
   * VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
   * </pre>
   *
   * <code>VAR_PROTO = 1;</code>
   */
  VAR_PROTO(1),
  /**
   * <pre>
   * VAR_RLP uses rlp int encoding of the length
   * </pre>
   *
   * <code>VAR_RLP = 2;</code>
   */
  VAR_RLP(2),
  /**
   * <pre>
   * FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
   * </pre>
   *
   * <code>FIXED32_BIG = 3;</code>
   */
  FIXED32_BIG(3),
  /**
   * <pre>
   * FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
   * </pre>
   *
   * <code>FIXED32_LITTLE = 4;</code>
   */
  FIXED32_LITTLE(4),
  /**
   * <pre>
   * FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
   * </pre>
   *
   * <code>FIXED64_BIG = 5;</code>
   */
  FIXED64_BIG(5),
  /**
   * <pre>
   * FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
   * </pre>
   *
   * <code>FIXED64_LITTLE = 6;</code>
   */
  FIXED64_LITTLE(6),
  /**
   * <pre>
   * REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
   * </pre>
   *
   * <code>REQUIRE_32_BYTES = 7;</code>
   */
  REQUIRE_32_BYTES(7),
  /**
   * <pre>
   * REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
   * </pre>
   *
   * <code>REQUIRE_64_BYTES = 8;</code>
   */
  REQUIRE_64_BYTES(8),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * NO_PREFIX don't include any length info
   * </pre>
   *
   * <code>NO_PREFIX = 0;</code>
   */
  public static final int NO_PREFIX_VALUE = 0;
  /**
   * <pre>
   * VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
   * </pre>
   *
   * <code>VAR_PROTO = 1;</code>
   */
  public static final int VAR_PROTO_VALUE = 1;
  /**
   * <pre>
   * VAR_RLP uses rlp int encoding of the length
   * </pre>
   *
   * <code>VAR_RLP = 2;</code>
   */
  public static final int VAR_RLP_VALUE = 2;
  /**
   * <pre>
   * FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
   * </pre>
   *
   * <code>FIXED32_BIG = 3;</code>
   */
  public static final int FIXED32_BIG_VALUE = 3;
  /**
   * <pre>
   * FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
   * </pre>
   *
   * <code>FIXED32_LITTLE = 4;</code>
   */
  public static final int FIXED32_LITTLE_VALUE = 4;
  /**
   * <pre>
   * FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
   * </pre>
   *
   * <code>FIXED64_BIG = 5;</code>
   */
  public static final int FIXED64_BIG_VALUE = 5;
  /**
   * <pre>
   * FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
   * </pre>
   *
   * <code>FIXED64_LITTLE = 6;</code>
   */
  public static final int FIXED64_LITTLE_VALUE = 6;
  /**
   * <pre>
   * REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
   * </pre>
   *
   * <code>REQUIRE_32_BYTES = 7;</code>
   */
  public static final int REQUIRE_32_BYTES_VALUE = 7;
  /**
   * <pre>
   * REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
   * </pre>
   *
   * <code>REQUIRE_64_BYTES = 8;</code>
   */
  public static final int REQUIRE_64_BYTES_VALUE = 8;


  @java.lang.Override
  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The number of the enum to look for.
   * @return The enum associated with the given number.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static LengthOp valueOf(int value) {
    return forNumber(value);
  }

  public static LengthOp forNumber(int value) {
    switch (value) {
      case 0: return NO_PREFIX;
      case 1: return VAR_PROTO;
      case 2: return VAR_RLP;
      case 3: return FIXED32_BIG;
      case 4: return FIXED32_LITTLE;
      case 5: return FIXED64_BIG;
      case 6: return FIXED64_LITTLE;
      case 7: return REQUIRE_32_BYTES;
      case 8: return REQUIRE_64_BYTES;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<LengthOp>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      LengthOp> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<LengthOp>() {
          @java.lang.Override
          public LengthOp findValueByNumber(int number) {
            return LengthOp.forNumber(number);
          }
        };

  public static com.google.protobuf.Internal.EnumVerifier 
      internalGetVerifier() {
    return LengthOpVerifier.INSTANCE;
  }

  private static final class LengthOpVerifier implements 
       com.google.protobuf.Internal.EnumVerifier { 
          static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new LengthOpVerifier();
          @java.lang.Override
          public boolean isInRange(int number) {
            return LengthOp.forNumber(number) != null;
          }
        };

  private final int value;

  private LengthOp(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:cosmos.ics23.v1.LengthOp)
}

