// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/ics23/v1/proofs.proto

package com.cosmos.ics23.v1;

/**
 * <pre>
 **
 *LeafOp represents the raw key-value data we wish to prove, and
 *must be flexible to represent the internal transformation from
 *the original key-value pairs into the basis hash, for many existing
 *merkle trees.
 *key and value are passed in. So that the signature of this operation is:
 *leafOp(key, value) -&gt; output
 *To process this, first prehash the keys and values if needed (ANY means no hash in this case):
 *hkey = prehashKey(key)
 *hvalue = prehashValue(value)
 *Then combine the bytes, and hash it
 *output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
 * </pre>
 *
 * Protobuf type {@code cosmos.ics23.v1.LeafOp}
 */
public  final class LeafOp extends
    com.google.protobuf.GeneratedMessageLite<
        LeafOp, LeafOp.Builder> implements
    // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.LeafOp)
    LeafOpOrBuilder {
  private LeafOp() {
    prefix_ = com.google.protobuf.ByteString.EMPTY;
  }
  public static final int HASH_FIELD_NUMBER = 1;
  private int hash_;
  /**
   * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
   * @return The enum numeric value on the wire for hash.
   */
  @java.lang.Override
  public int getHashValue() {
    return hash_;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
   * @return The hash.
   */
  @java.lang.Override
  public com.cosmos.ics23.v1.HashOp getHash() {
    com.cosmos.ics23.v1.HashOp result = com.cosmos.ics23.v1.HashOp.forNumber(hash_);
    return result == null ? com.cosmos.ics23.v1.HashOp.UNRECOGNIZED : result;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
   * @param value The enum numeric value on the wire for hash to set.
   */
  private void setHashValue(int value) {
      hash_ = value;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
   * @param value The hash to set.
   */
  private void setHash(com.cosmos.ics23.v1.HashOp value) {
    hash_ = value.getNumber();
    
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
   */
  private void clearHash() {
    
    hash_ = 0;
  }

  public static final int PREHASH_KEY_FIELD_NUMBER = 2;
  private int prehashKey_;
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
   * @return The enum numeric value on the wire for prehashKey.
   */
  @java.lang.Override
  public int getPrehashKeyValue() {
    return prehashKey_;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
   * @return The prehashKey.
   */
  @java.lang.Override
  public com.cosmos.ics23.v1.HashOp getPrehashKey() {
    com.cosmos.ics23.v1.HashOp result = com.cosmos.ics23.v1.HashOp.forNumber(prehashKey_);
    return result == null ? com.cosmos.ics23.v1.HashOp.UNRECOGNIZED : result;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
   * @param value The enum numeric value on the wire for prehashKey to set.
   */
  private void setPrehashKeyValue(int value) {
      prehashKey_ = value;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
   * @param value The prehashKey to set.
   */
  private void setPrehashKey(com.cosmos.ics23.v1.HashOp value) {
    prehashKey_ = value.getNumber();
    
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
   */
  private void clearPrehashKey() {
    
    prehashKey_ = 0;
  }

  public static final int PREHASH_VALUE_FIELD_NUMBER = 3;
  private int prehashValue_;
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
   * @return The enum numeric value on the wire for prehashValue.
   */
  @java.lang.Override
  public int getPrehashValueValue() {
    return prehashValue_;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
   * @return The prehashValue.
   */
  @java.lang.Override
  public com.cosmos.ics23.v1.HashOp getPrehashValue() {
    com.cosmos.ics23.v1.HashOp result = com.cosmos.ics23.v1.HashOp.forNumber(prehashValue_);
    return result == null ? com.cosmos.ics23.v1.HashOp.UNRECOGNIZED : result;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
   * @param value The enum numeric value on the wire for prehashValue to set.
   */
  private void setPrehashValueValue(int value) {
      prehashValue_ = value;
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
   * @param value The prehashValue to set.
   */
  private void setPrehashValue(com.cosmos.ics23.v1.HashOp value) {
    prehashValue_ = value.getNumber();
    
  }
  /**
   * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
   */
  private void clearPrehashValue() {
    
    prehashValue_ = 0;
  }

  public static final int LENGTH_FIELD_NUMBER = 4;
  private int length_;
  /**
   * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
   * @return The enum numeric value on the wire for length.
   */
  @java.lang.Override
  public int getLengthValue() {
    return length_;
  }
  /**
   * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
   * @return The length.
   */
  @java.lang.Override
  public com.cosmos.ics23.v1.LengthOp getLength() {
    com.cosmos.ics23.v1.LengthOp result = com.cosmos.ics23.v1.LengthOp.forNumber(length_);
    return result == null ? com.cosmos.ics23.v1.LengthOp.UNRECOGNIZED : result;
  }
  /**
   * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
   * @param value The enum numeric value on the wire for length to set.
   */
  private void setLengthValue(int value) {
      length_ = value;
  }
  /**
   * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
   * @param value The length to set.
   */
  private void setLength(com.cosmos.ics23.v1.LengthOp value) {
    length_ = value.getNumber();
    
  }
  /**
   * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
   */
  private void clearLength() {
    
    length_ = 0;
  }

  public static final int PREFIX_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString prefix_;
  /**
   * <pre>
   * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
   * a leaf node from an inner node.
   * </pre>
   *
   * <code>bytes prefix = 5 [json_name = "prefix"];</code>
   * @return The prefix.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPrefix() {
    return prefix_;
  }
  /**
   * <pre>
   * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
   * a leaf node from an inner node.
   * </pre>
   *
   * <code>bytes prefix = 5 [json_name = "prefix"];</code>
   * @param value The prefix to set.
   */
  private void setPrefix(com.google.protobuf.ByteString value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    prefix_ = value;
  }
  /**
   * <pre>
   * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
   * a leaf node from an inner node.
   * </pre>
   *
   * <code>bytes prefix = 5 [json_name = "prefix"];</code>
   */
  private void clearPrefix() {
    
    prefix_ = getDefaultInstance().getPrefix();
  }

  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.LeafOp parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.cosmos.ics23.v1.LeafOp parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.cosmos.ics23.v1.LeafOp parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.cosmos.ics23.v1.LeafOp prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   **
   *LeafOp represents the raw key-value data we wish to prove, and
   *must be flexible to represent the internal transformation from
   *the original key-value pairs into the basis hash, for many existing
   *merkle trees.
   *key and value are passed in. So that the signature of this operation is:
   *leafOp(key, value) -&gt; output
   *To process this, first prehash the keys and values if needed (ANY means no hash in this case):
   *hkey = prehashKey(key)
   *hvalue = prehashValue(value)
   *Then combine the bytes, and hash it
   *output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.LeafOp}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.cosmos.ics23.v1.LeafOp, Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.LeafOp)
      com.cosmos.ics23.v1.LeafOpOrBuilder {
    // Construct using com.cosmos.ics23.v1.LeafOp.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    @java.lang.Override
    public int getHashValue() {
      return instance.getHashValue();
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @param value The hash to set.
     * @return This builder for chaining.
     */
    public Builder setHashValue(int value) {
      copyOnWrite();
      instance.setHashValue(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The hash.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.HashOp getHash() {
      return instance.getHash();
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @param value The enum numeric value on the wire for hash to set.
     * @return This builder for chaining.
     */
    public Builder setHash(com.cosmos.ics23.v1.HashOp value) {
      copyOnWrite();
      instance.setHash(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHash() {
      copyOnWrite();
      instance.clearHash();
      return this;
    }

    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return The enum numeric value on the wire for prehashKey.
     */
    @java.lang.Override
    public int getPrehashKeyValue() {
      return instance.getPrehashKeyValue();
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @param value The prehashKey to set.
     * @return This builder for chaining.
     */
    public Builder setPrehashKeyValue(int value) {
      copyOnWrite();
      instance.setPrehashKeyValue(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return The prehashKey.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.HashOp getPrehashKey() {
      return instance.getPrehashKey();
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @param value The enum numeric value on the wire for prehashKey to set.
     * @return This builder for chaining.
     */
    public Builder setPrehashKey(com.cosmos.ics23.v1.HashOp value) {
      copyOnWrite();
      instance.setPrehashKey(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPrehashKey() {
      copyOnWrite();
      instance.clearPrehashKey();
      return this;
    }

    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return The enum numeric value on the wire for prehashValue.
     */
    @java.lang.Override
    public int getPrehashValueValue() {
      return instance.getPrehashValueValue();
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @param value The prehashValue to set.
     * @return This builder for chaining.
     */
    public Builder setPrehashValueValue(int value) {
      copyOnWrite();
      instance.setPrehashValueValue(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return The prehashValue.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.HashOp getPrehashValue() {
      return instance.getPrehashValue();
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @param value The enum numeric value on the wire for prehashValue to set.
     * @return This builder for chaining.
     */
    public Builder setPrehashValue(com.cosmos.ics23.v1.HashOp value) {
      copyOnWrite();
      instance.setPrehashValue(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPrehashValue() {
      copyOnWrite();
      instance.clearPrehashValue();
      return this;
    }

    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @return The enum numeric value on the wire for length.
     */
    @java.lang.Override
    public int getLengthValue() {
      return instance.getLengthValue();
    }
    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @param value The length to set.
     * @return This builder for chaining.
     */
    public Builder setLengthValue(int value) {
      copyOnWrite();
      instance.setLengthValue(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @return The length.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.LengthOp getLength() {
      return instance.getLength();
    }
    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @param value The enum numeric value on the wire for length to set.
     * @return This builder for chaining.
     */
    public Builder setLength(com.cosmos.ics23.v1.LengthOp value) {
      copyOnWrite();
      instance.setLength(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLength() {
      copyOnWrite();
      instance.clearLength();
      return this;
    }

    /**
     * <pre>
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * </pre>
     *
     * <code>bytes prefix = 5 [json_name = "prefix"];</code>
     * @return The prefix.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrefix() {
      return instance.getPrefix();
    }
    /**
     * <pre>
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * </pre>
     *
     * <code>bytes prefix = 5 [json_name = "prefix"];</code>
     * @param value The prefix to set.
     * @return This builder for chaining.
     */
    public Builder setPrefix(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setPrefix(value);
      return this;
    }
    /**
     * <pre>
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * </pre>
     *
     * <code>bytes prefix = 5 [json_name = "prefix"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPrefix() {
      copyOnWrite();
      instance.clearPrefix();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.LeafOp)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.cosmos.ics23.v1.LeafOp();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "hash_",
            "prehashKey_",
            "prehashValue_",
            "length_",
            "prefix_",
          };
          java.lang.String info =
              "\u0000\u0005\u0000\u0000\u0001\u0005\u0005\u0000\u0000\u0000\u0001\f\u0002\f\u0003" +
              "\f\u0004\f\u0005\n";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.cosmos.ics23.v1.LeafOp> parser = PARSER;
        if (parser == null) {
          synchronized (com.cosmos.ics23.v1.LeafOp.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.cosmos.ics23.v1.LeafOp>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.LeafOp)
  private static final com.cosmos.ics23.v1.LeafOp DEFAULT_INSTANCE;
  static {
    LeafOp defaultInstance = new LeafOp();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      LeafOp.class, defaultInstance);
  }

  public static com.cosmos.ics23.v1.LeafOp getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<LeafOp> PARSER;

  public static com.google.protobuf.Parser<LeafOp> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

