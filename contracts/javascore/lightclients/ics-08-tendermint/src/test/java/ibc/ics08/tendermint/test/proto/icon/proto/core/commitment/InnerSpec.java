// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/23-commitment/proofs.proto

package com.icon.proto.core.commitment;

/**
 * <pre>
 *InnerSpec contains all store-specific structure info to determine if two proofs from a
 *given store are neighbors.
 *This enables:
 *isLeftMost(spec: InnerSpec, op: InnerOp)
 *isRightMost(spec: InnerSpec, op: InnerOp)
 *isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
 * </pre>
 *
 * Protobuf type {@code icon.proto.core.commitment.InnerSpec}
 */
public  final class InnerSpec extends
    com.google.protobuf.GeneratedMessageLite<
        InnerSpec, InnerSpec.Builder> implements
    // @@protoc_insertion_point(message_implements:icon.proto.core.commitment.InnerSpec)
    InnerSpecOrBuilder {
  private InnerSpec() {
    childOrder_ = emptyIntList();
    emptyChild_ = com.google.protobuf.ByteString.EMPTY;
  }
  public static final int CHILD_ORDER_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.IntList childOrder_;
  /**
   * <pre>
   * Child order is the ordering of the children node, must count from 0
   * iavl tree is [0, 1] (left then right)
   * merk is [0, 2, 1] (left, right, here)
   * </pre>
   *
   * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
   * @return A list containing the childOrder.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
      getChildOrderList() {
    return childOrder_;
  }
  /**
   * <pre>
   * Child order is the ordering of the children node, must count from 0
   * iavl tree is [0, 1] (left then right)
   * merk is [0, 2, 1] (left, right, here)
   * </pre>
   *
   * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
   * @return The count of childOrder.
   */
  @java.lang.Override
  public int getChildOrderCount() {
    return childOrder_.size();
  }
  /**
   * <pre>
   * Child order is the ordering of the children node, must count from 0
   * iavl tree is [0, 1] (left then right)
   * merk is [0, 2, 1] (left, right, here)
   * </pre>
   *
   * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
   * @param index The index of the element to return.
   * @return The childOrder at the given index.
   */
  @java.lang.Override
  public int getChildOrder(int index) {
    return childOrder_.getInt(index);
  }
  private int childOrderMemoizedSerializedSize = -1;
  private void ensureChildOrderIsMutable() {
    com.google.protobuf.Internal.IntList tmp = childOrder_;
    if (!tmp.isModifiable()) {
      childOrder_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
     }
  }
  /**
   * <pre>
   * Child order is the ordering of the children node, must count from 0
   * iavl tree is [0, 1] (left then right)
   * merk is [0, 2, 1] (left, right, here)
   * </pre>
   *
   * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
   * @param index The index to set the value at.
   * @param value The childOrder to set.
   */
  private void setChildOrder(
      int index, int value) {
    ensureChildOrderIsMutable();
    childOrder_.setInt(index, value);
  }
  /**
   * <pre>
   * Child order is the ordering of the children node, must count from 0
   * iavl tree is [0, 1] (left then right)
   * merk is [0, 2, 1] (left, right, here)
   * </pre>
   *
   * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
   * @param value The childOrder to add.
   */
  private void addChildOrder(int value) {
    ensureChildOrderIsMutable();
    childOrder_.addInt(value);
  }
  /**
   * <pre>
   * Child order is the ordering of the children node, must count from 0
   * iavl tree is [0, 1] (left then right)
   * merk is [0, 2, 1] (left, right, here)
   * </pre>
   *
   * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
   * @param values The childOrder to add.
   */
  private void addAllChildOrder(
      java.lang.Iterable<? extends java.lang.Integer> values) {
    ensureChildOrderIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, childOrder_);
  }
  /**
   * <pre>
   * Child order is the ordering of the children node, must count from 0
   * iavl tree is [0, 1] (left then right)
   * merk is [0, 2, 1] (left, right, here)
   * </pre>
   *
   * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
   */
  private void clearChildOrder() {
    childOrder_ = emptyIntList();
  }

  public static final int CHILD_SIZE_FIELD_NUMBER = 2;
  private int childSize_;
  /**
   * <code>int32 child_size = 2 [json_name = "childSize"];</code>
   * @return The childSize.
   */
  @java.lang.Override
  public int getChildSize() {
    return childSize_;
  }
  /**
   * <code>int32 child_size = 2 [json_name = "childSize"];</code>
   * @param value The childSize to set.
   */
  private void setChildSize(int value) {
    
    childSize_ = value;
  }
  /**
   * <code>int32 child_size = 2 [json_name = "childSize"];</code>
   */
  private void clearChildSize() {
    
    childSize_ = 0;
  }

  public static final int MIN_PREFIX_LENGTH_FIELD_NUMBER = 3;
  private int minPrefixLength_;
  /**
   * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
   * @return The minPrefixLength.
   */
  @java.lang.Override
  public int getMinPrefixLength() {
    return minPrefixLength_;
  }
  /**
   * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
   * @param value The minPrefixLength to set.
   */
  private void setMinPrefixLength(int value) {
    
    minPrefixLength_ = value;
  }
  /**
   * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
   */
  private void clearMinPrefixLength() {
    
    minPrefixLength_ = 0;
  }

  public static final int MAX_PREFIX_LENGTH_FIELD_NUMBER = 4;
  private int maxPrefixLength_;
  /**
   * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
   * @return The maxPrefixLength.
   */
  @java.lang.Override
  public int getMaxPrefixLength() {
    return maxPrefixLength_;
  }
  /**
   * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
   * @param value The maxPrefixLength to set.
   */
  private void setMaxPrefixLength(int value) {
    
    maxPrefixLength_ = value;
  }
  /**
   * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
   */
  private void clearMaxPrefixLength() {
    
    maxPrefixLength_ = 0;
  }

  public static final int EMPTY_CHILD_FIELD_NUMBER = 5;
  private com.google.protobuf.ByteString emptyChild_;
  /**
   * <pre>
   * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
   * </pre>
   *
   * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
   * @return The emptyChild.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getEmptyChild() {
    return emptyChild_;
  }
  /**
   * <pre>
   * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
   * </pre>
   *
   * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
   * @param value The emptyChild to set.
   */
  private void setEmptyChild(com.google.protobuf.ByteString value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    emptyChild_ = value;
  }
  /**
   * <pre>
   * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
   * </pre>
   *
   * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
   */
  private void clearEmptyChild() {
    
    emptyChild_ = getDefaultInstance().getEmptyChild();
  }

  public static final int HASH_FIELD_NUMBER = 6;
  private int hash_;
  /**
   * <pre>
   * hash is the algorithm that must be used for each InnerOp
   * </pre>
   *
   * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
   * @return The enum numeric value on the wire for hash.
   */
  @java.lang.Override
  public int getHashValue() {
    return hash_;
  }
  /**
   * <pre>
   * hash is the algorithm that must be used for each InnerOp
   * </pre>
   *
   * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
   * @return The hash.
   */
  @java.lang.Override
  public com.icon.proto.core.commitment.HashOp getHash() {
    com.icon.proto.core.commitment.HashOp result = com.icon.proto.core.commitment.HashOp.forNumber(hash_);
    return result == null ? com.icon.proto.core.commitment.HashOp.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * hash is the algorithm that must be used for each InnerOp
   * </pre>
   *
   * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
   * @param value The enum numeric value on the wire for hash to set.
   */
  private void setHashValue(int value) {
      hash_ = value;
  }
  /**
   * <pre>
   * hash is the algorithm that must be used for each InnerOp
   * </pre>
   *
   * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
   * @param value The hash to set.
   */
  private void setHash(com.icon.proto.core.commitment.HashOp value) {
    hash_ = value.getNumber();
    
  }
  /**
   * <pre>
   * hash is the algorithm that must be used for each InnerOp
   * </pre>
   *
   * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
   */
  private void clearHash() {
    
    hash_ = 0;
  }

  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.icon.proto.core.commitment.InnerSpec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.icon.proto.core.commitment.InnerSpec prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   *InnerSpec contains all store-specific structure info to determine if two proofs from a
   *given store are neighbors.
   *This enables:
   *isLeftMost(spec: InnerSpec, op: InnerOp)
   *isRightMost(spec: InnerSpec, op: InnerOp)
   *isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
   * </pre>
   *
   * Protobuf type {@code icon.proto.core.commitment.InnerSpec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.icon.proto.core.commitment.InnerSpec, Builder> implements
      // @@protoc_insertion_point(builder_implements:icon.proto.core.commitment.InnerSpec)
      com.icon.proto.core.commitment.InnerSpecOrBuilder {
    // Construct using com.icon.proto.core.commitment.InnerSpec.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @return A list containing the childOrder.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getChildOrderList() {
      return java.util.Collections.unmodifiableList(
          instance.getChildOrderList());
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @return The count of childOrder.
     */
    @java.lang.Override
    public int getChildOrderCount() {
      return instance.getChildOrderCount();
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @param index The index of the element to return.
     * @return The childOrder at the given index.
     */
    @java.lang.Override
    public int getChildOrder(int index) {
      return instance.getChildOrder(index);
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @param value The childOrder to set.
     * @return This builder for chaining.
     */
    public Builder setChildOrder(
        int index, int value) {
      copyOnWrite();
      instance.setChildOrder(index, value);
      return this;
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @param value The childOrder to add.
     * @return This builder for chaining.
     */
    public Builder addChildOrder(int value) {
      copyOnWrite();
      instance.addChildOrder(value);
      return this;
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @param values The childOrder to add.
     * @return This builder for chaining.
     */
    public Builder addAllChildOrder(
        java.lang.Iterable<? extends java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllChildOrder(values);
      return this;
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @return This builder for chaining.
     */
    public Builder clearChildOrder() {
      copyOnWrite();
      instance.clearChildOrder();
      return this;
    }

    /**
     * <code>int32 child_size = 2 [json_name = "childSize"];</code>
     * @return The childSize.
     */
    @java.lang.Override
    public int getChildSize() {
      return instance.getChildSize();
    }
    /**
     * <code>int32 child_size = 2 [json_name = "childSize"];</code>
     * @param value The childSize to set.
     * @return This builder for chaining.
     */
    public Builder setChildSize(int value) {
      copyOnWrite();
      instance.setChildSize(value);
      return this;
    }
    /**
     * <code>int32 child_size = 2 [json_name = "childSize"];</code>
     * @return This builder for chaining.
     */
    public Builder clearChildSize() {
      copyOnWrite();
      instance.clearChildSize();
      return this;
    }

    /**
     * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
     * @return The minPrefixLength.
     */
    @java.lang.Override
    public int getMinPrefixLength() {
      return instance.getMinPrefixLength();
    }
    /**
     * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
     * @param value The minPrefixLength to set.
     * @return This builder for chaining.
     */
    public Builder setMinPrefixLength(int value) {
      copyOnWrite();
      instance.setMinPrefixLength(value);
      return this;
    }
    /**
     * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinPrefixLength() {
      copyOnWrite();
      instance.clearMinPrefixLength();
      return this;
    }

    /**
     * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
     * @return The maxPrefixLength.
     */
    @java.lang.Override
    public int getMaxPrefixLength() {
      return instance.getMaxPrefixLength();
    }
    /**
     * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
     * @param value The maxPrefixLength to set.
     * @return This builder for chaining.
     */
    public Builder setMaxPrefixLength(int value) {
      copyOnWrite();
      instance.setMaxPrefixLength(value);
      return this;
    }
    /**
     * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxPrefixLength() {
      copyOnWrite();
      instance.clearMaxPrefixLength();
      return this;
    }

    /**
     * <pre>
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     * </pre>
     *
     * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
     * @return The emptyChild.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getEmptyChild() {
      return instance.getEmptyChild();
    }
    /**
     * <pre>
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     * </pre>
     *
     * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
     * @param value The emptyChild to set.
     * @return This builder for chaining.
     */
    public Builder setEmptyChild(com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setEmptyChild(value);
      return this;
    }
    /**
     * <pre>
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     * </pre>
     *
     * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
     * @return This builder for chaining.
     */
    public Builder clearEmptyChild() {
      copyOnWrite();
      instance.clearEmptyChild();
      return this;
    }

    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    @java.lang.Override
    public int getHashValue() {
      return instance.getHashValue();
    }
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
     * @param value The hash to set.
     * @return This builder for chaining.
     */
    public Builder setHashValue(int value) {
      copyOnWrite();
      instance.setHashValue(value);
      return this;
    }
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
     * @return The hash.
     */
    @java.lang.Override
    public com.icon.proto.core.commitment.HashOp getHash() {
      return instance.getHash();
    }
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
     * @param value The enum numeric value on the wire for hash to set.
     * @return This builder for chaining.
     */
    public Builder setHash(com.icon.proto.core.commitment.HashOp value) {
      copyOnWrite();
      instance.setHash(value);
      return this;
    }
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.icon.proto.core.commitment.HashOp hash = 6 [json_name = "hash"];</code>
     * @return This builder for chaining.
     */
    public Builder clearHash() {
      copyOnWrite();
      instance.clearHash();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:icon.proto.core.commitment.InnerSpec)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.icon.proto.core.commitment.InnerSpec();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "childOrder_",
            "childSize_",
            "minPrefixLength_",
            "maxPrefixLength_",
            "emptyChild_",
            "hash_",
          };
          java.lang.String info =
              "\u0000\u0006\u0000\u0000\u0001\u0006\u0006\u0000\u0001\u0000\u0001\'\u0002\u0004" +
              "\u0003\u0004\u0004\u0004\u0005\n\u0006\f";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.icon.proto.core.commitment.InnerSpec> parser = PARSER;
        if (parser == null) {
          synchronized (com.icon.proto.core.commitment.InnerSpec.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.icon.proto.core.commitment.InnerSpec>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:icon.proto.core.commitment.InnerSpec)
  private static final com.icon.proto.core.commitment.InnerSpec DEFAULT_INSTANCE;
  static {
    InnerSpec defaultInstance = new InnerSpec();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      InnerSpec.class, defaultInstance);
  }

  public static com.icon.proto.core.commitment.InnerSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<InnerSpec> PARSER;

  public static com.google.protobuf.Parser<InnerSpec> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

