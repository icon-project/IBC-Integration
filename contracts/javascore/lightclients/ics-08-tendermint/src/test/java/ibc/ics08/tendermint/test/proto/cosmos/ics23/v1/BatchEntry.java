// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/ics23/v1/proofs.proto

package com.cosmos.ics23.v1;

/**
 * <pre>
 * Use BatchEntry not CommitmentProof, to avoid recursion
 * </pre>
 *
 * Protobuf type {@code cosmos.ics23.v1.BatchEntry}
 */
public  final class BatchEntry extends
    com.google.protobuf.GeneratedMessageLite<
        BatchEntry, BatchEntry.Builder> implements
    // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.BatchEntry)
    BatchEntryOrBuilder {
  private BatchEntry() {
  }
  private int proofCase_ = 0;
  private java.lang.Object proof_;
  public enum ProofCase {
    EXIST(1),
    NONEXIST(2),
    PROOF_NOT_SET(0);
    private final int value;
    private ProofCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ProofCase valueOf(int value) {
      return forNumber(value);
    }

    public static ProofCase forNumber(int value) {
      switch (value) {
        case 1: return EXIST;
        case 2: return NONEXIST;
        case 0: return PROOF_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  @java.lang.Override
  public ProofCase
  getProofCase() {
    return ProofCase.forNumber(
        proofCase_);
  }

  private void clearProof() {
    proofCase_ = 0;
    proof_ = null;
  }

  public static final int EXIST_FIELD_NUMBER = 1;
  /**
   * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
   */
  @java.lang.Override
  public boolean hasExist() {
    return proofCase_ == 1;
  }
  /**
   * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
   */
  @java.lang.Override
  public com.cosmos.ics23.v1.ExistenceProof getExist() {
    if (proofCase_ == 1) {
       return (com.cosmos.ics23.v1.ExistenceProof) proof_;
    }
    return com.cosmos.ics23.v1.ExistenceProof.getDefaultInstance();
  }
  /**
   * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
   */
  private void setExist(com.cosmos.ics23.v1.ExistenceProof value) {
    value.getClass();
  proof_ = value;
    proofCase_ = 1;
  }
  /**
   * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
   */
  private void mergeExist(com.cosmos.ics23.v1.ExistenceProof value) {
    value.getClass();
  if (proofCase_ == 1 &&
        proof_ != com.cosmos.ics23.v1.ExistenceProof.getDefaultInstance()) {
      proof_ = com.cosmos.ics23.v1.ExistenceProof.newBuilder((com.cosmos.ics23.v1.ExistenceProof) proof_)
          .mergeFrom(value).buildPartial();
    } else {
      proof_ = value;
    }
    proofCase_ = 1;
  }
  /**
   * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
   */
  private void clearExist() {
    if (proofCase_ == 1) {
      proofCase_ = 0;
      proof_ = null;
    }
  }

  public static final int NONEXIST_FIELD_NUMBER = 2;
  /**
   * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   */
  @java.lang.Override
  public boolean hasNonexist() {
    return proofCase_ == 2;
  }
  /**
   * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   */
  @java.lang.Override
  public com.cosmos.ics23.v1.NonExistenceProof getNonexist() {
    if (proofCase_ == 2) {
       return (com.cosmos.ics23.v1.NonExistenceProof) proof_;
    }
    return com.cosmos.ics23.v1.NonExistenceProof.getDefaultInstance();
  }
  /**
   * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   */
  private void setNonexist(com.cosmos.ics23.v1.NonExistenceProof value) {
    value.getClass();
  proof_ = value;
    proofCase_ = 2;
  }
  /**
   * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   */
  private void mergeNonexist(com.cosmos.ics23.v1.NonExistenceProof value) {
    value.getClass();
  if (proofCase_ == 2 &&
        proof_ != com.cosmos.ics23.v1.NonExistenceProof.getDefaultInstance()) {
      proof_ = com.cosmos.ics23.v1.NonExistenceProof.newBuilder((com.cosmos.ics23.v1.NonExistenceProof) proof_)
          .mergeFrom(value).buildPartial();
    } else {
      proof_ = value;
    }
    proofCase_ = 2;
  }
  /**
   * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
   */
  private void clearNonexist() {
    if (proofCase_ == 2) {
      proofCase_ = 0;
      proof_ = null;
    }
  }

  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.cosmos.ics23.v1.BatchEntry parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.cosmos.ics23.v1.BatchEntry prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * Use BatchEntry not CommitmentProof, to avoid recursion
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.BatchEntry}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.cosmos.ics23.v1.BatchEntry, Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.BatchEntry)
      com.cosmos.ics23.v1.BatchEntryOrBuilder {
    // Construct using com.cosmos.ics23.v1.BatchEntry.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    @java.lang.Override
    public ProofCase
        getProofCase() {
      return instance.getProofCase();
    }

    public Builder clearProof() {
      copyOnWrite();
      instance.clearProof();
      return this;
    }


    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    @java.lang.Override
    public boolean hasExist() {
      return instance.hasExist();
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ExistenceProof getExist() {
      return instance.getExist();
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    public Builder setExist(com.cosmos.ics23.v1.ExistenceProof value) {
      copyOnWrite();
      instance.setExist(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    public Builder setExist(
        com.cosmos.ics23.v1.ExistenceProof.Builder builderForValue) {
      copyOnWrite();
      instance.setExist(builderForValue.build());
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    public Builder mergeExist(com.cosmos.ics23.v1.ExistenceProof value) {
      copyOnWrite();
      instance.mergeExist(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    public Builder clearExist() {
      copyOnWrite();
      instance.clearExist();
      return this;
    }

    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    @java.lang.Override
    public boolean hasNonexist() {
      return instance.hasNonexist();
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.NonExistenceProof getNonexist() {
      return instance.getNonexist();
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    public Builder setNonexist(com.cosmos.ics23.v1.NonExistenceProof value) {
      copyOnWrite();
      instance.setNonexist(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    public Builder setNonexist(
        com.cosmos.ics23.v1.NonExistenceProof.Builder builderForValue) {
      copyOnWrite();
      instance.setNonexist(builderForValue.build());
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    public Builder mergeNonexist(com.cosmos.ics23.v1.NonExistenceProof value) {
      copyOnWrite();
      instance.mergeNonexist(value);
      return this;
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    public Builder clearNonexist() {
      copyOnWrite();
      instance.clearNonexist();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.BatchEntry)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.cosmos.ics23.v1.BatchEntry();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "proof_",
            "proofCase_",
            com.cosmos.ics23.v1.ExistenceProof.class,
            com.cosmos.ics23.v1.NonExistenceProof.class,
          };
          java.lang.String info =
              "\u0000\u0002\u0001\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001<\u0000\u0002<" +
              "\u0000";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.cosmos.ics23.v1.BatchEntry> parser = PARSER;
        if (parser == null) {
          synchronized (com.cosmos.ics23.v1.BatchEntry.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.cosmos.ics23.v1.BatchEntry>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.BatchEntry)
  private static final com.cosmos.ics23.v1.BatchEntry DEFAULT_INSTANCE;
  static {
    BatchEntry defaultInstance = new BatchEntry();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      BatchEntry.class, defaultInstance);
  }

  public static com.cosmos.ics23.v1.BatchEntry getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<BatchEntry> PARSER;

  public static com.google.protobuf.Parser<BatchEntry> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

