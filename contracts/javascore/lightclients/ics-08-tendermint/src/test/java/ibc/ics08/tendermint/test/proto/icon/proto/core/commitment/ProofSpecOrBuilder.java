// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/23-commitment/proofs.proto

package com.icon.proto.core.commitment;

public interface ProofSpecOrBuilder extends
    // @@protoc_insertion_point(interface_extends:icon.proto.core.commitment.ProofSpec)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * any field in the ExistenceProof must be the same as in this spec.
   * except Prefix, which is just the first bytes of prefix (spec can be longer)
   * </pre>
   *
   * <code>.icon.proto.core.commitment.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
   * @return Whether the leafSpec field is set.
   */
  boolean hasLeafSpec();
  /**
   * <pre>
   * any field in the ExistenceProof must be the same as in this spec.
   * except Prefix, which is just the first bytes of prefix (spec can be longer)
   * </pre>
   *
   * <code>.icon.proto.core.commitment.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
   * @return The leafSpec.
   */
  com.icon.proto.core.commitment.LeafOp getLeafSpec();

  /**
   * <code>.icon.proto.core.commitment.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
   * @return Whether the innerSpec field is set.
   */
  boolean hasInnerSpec();
  /**
   * <code>.icon.proto.core.commitment.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
   * @return The innerSpec.
   */
  com.icon.proto.core.commitment.InnerSpec getInnerSpec();

  /**
   * <pre>
   * max_depth (if &gt; 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
   * </pre>
   *
   * <code>int32 max_depth = 3 [json_name = "maxDepth"];</code>
   * @return The maxDepth.
   */
  int getMaxDepth();

  /**
   * <pre>
   * min_depth (if &gt; 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
   * </pre>
   *
   * <code>int32 min_depth = 4 [json_name = "minDepth"];</code>
   * @return The minDepth.
   */
  int getMinDepth();

  /**
   * <pre>
   * prehash_key_before_comparison is a flag that indicates whether to use the
   * prehash_key specified by LeafOp to compare lexical ordering of keys for
   * non-existence proofs.
   * </pre>
   *
   * <code>bool prehash_key_before_comparison = 5 [json_name = "prehashKeyBeforeComparison"];</code>
   * @return The prehashKeyBeforeComparison.
   */
  boolean getPrehashKeyBeforeComparison();
}
