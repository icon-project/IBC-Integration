// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos_proto/cosmos.proto

package com.cosmos_proto;

/**
 * <pre>
 * ScalarDescriptor describes an scalar type to be used with
 * the scalar field option and declared by declare_scalar.
 * Scalars extend simple protobuf built-in types with additional
 * syntax and semantics, for instance to represent big integers.
 * Scalars should ideally define an encoding such that there is only one
 * valid syntactical representation for a given semantic meaning,
 * i.e. the encoding should be deterministic.
 * </pre>
 *
 * Protobuf type {@code cosmos_proto.ScalarDescriptor}
 */
public  final class ScalarDescriptor extends
    com.google.protobuf.GeneratedMessageLite<
        ScalarDescriptor, ScalarDescriptor.Builder> implements
    // @@protoc_insertion_point(message_implements:cosmos_proto.ScalarDescriptor)
    ScalarDescriptorOrBuilder {
  private ScalarDescriptor() {
    name_ = "";
    description_ = "";
    fieldType_ = emptyIntList();
  }
  public static final int NAME_FIELD_NUMBER = 1;
  private java.lang.String name_;
  /**
   * <pre>
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    return name_;
  }
  /**
   * <pre>
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(name_);
  }
  /**
   * <pre>
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @param value The name to set.
   */
  private void setName(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    name_ = value;
  }
  /**
   * <pre>
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   */
  private void clearName() {
    
    name_ = getDefaultInstance().getName();
  }
  /**
   * <pre>
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @param value The bytes for name to set.
   */
  private void setNameBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    name_ = value.toStringUtf8();
    
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 2;
  private java.lang.String description_;
  /**
   * <pre>
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @return The description.
   */
  @java.lang.Override
  public java.lang.String getDescription() {
    return description_;
  }
  /**
   * <pre>
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(description_);
  }
  /**
   * <pre>
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @param value The description to set.
   */
  private void setDescription(
      java.lang.String value) {
    java.lang.Class<?> valueClass = value.getClass();
  
    description_ = value;
  }
  /**
   * <pre>
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   */
  private void clearDescription() {
    
    description_ = getDefaultInstance().getDescription();
  }
  /**
   * <pre>
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @param value The bytes for description to set.
   */
  private void setDescriptionBytes(
      com.google.protobuf.ByteString value) {
    checkByteStringIsUtf8(value);
    description_ = value.toStringUtf8();
    
  }

  public static final int FIELD_TYPE_FIELD_NUMBER = 3;
  private com.google.protobuf.Internal.IntList fieldType_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, com.cosmos_proto.ScalarType> fieldType_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.cosmos_proto.ScalarType>() {
            @java.lang.Override
            public com.cosmos_proto.ScalarType convert(java.lang.Integer from) {
              com.cosmos_proto.ScalarType result = com.cosmos_proto.ScalarType.forNumber(from);
              return result == null ? com.cosmos_proto.ScalarType.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @return A list containing the fieldType.
   */
  @java.lang.Override
  public java.util.List<com.cosmos_proto.ScalarType> getFieldTypeList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.cosmos_proto.ScalarType>(fieldType_, fieldType_converter_);
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @return The count of fieldType.
   */
  @java.lang.Override
  public int getFieldTypeCount() {
    return fieldType_.size();
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param index The index of the element to return.
   * @return The fieldType at the given index.
   */
  @java.lang.Override
  public com.cosmos_proto.ScalarType getFieldType(int index) {
    com.cosmos_proto.ScalarType result = com.cosmos_proto.ScalarType.forNumber(fieldType_.getInt(index));
    return result == null ? com.cosmos_proto.ScalarType.UNRECOGNIZED : result;
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @return A list containing the enum numeric values on the wire for fieldType.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getFieldTypeValueList() {
    return fieldType_;
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of fieldType at the given index.
   */
  @java.lang.Override
  public int getFieldTypeValue(int index) {
    return fieldType_.getInt(index);
  }
  private int fieldTypeMemoizedSerializedSize;
  private void ensureFieldTypeIsMutable() {
    com.google.protobuf.Internal.IntList tmp = fieldType_;
    if (!tmp.isModifiable()) {
      fieldType_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(tmp);
    }
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param index The index to set the value at.
   * @param value The fieldType to set.
   */
  private void setFieldType(
      int index, com.cosmos_proto.ScalarType value) {
    value.getClass();
  ensureFieldTypeIsMutable();
    fieldType_.setInt(index, value.getNumber());
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param value The fieldType to add.
   */
  private void addFieldType(com.cosmos_proto.ScalarType value) {
    value.getClass();
  ensureFieldTypeIsMutable();
    fieldType_.addInt(value.getNumber());
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param values The fieldType to add.
   */
  private void addAllFieldType(
      java.lang.Iterable<? extends com.cosmos_proto.ScalarType> values) {
    ensureFieldTypeIsMutable();
    for (com.cosmos_proto.ScalarType value : values) {
      fieldType_.addInt(value.getNumber());
    }
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   */
  private void clearFieldType() {
    fieldType_ = emptyIntList();
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param value The enum numeric value on the wire for fieldType to set.
   */
  private void setFieldTypeValue(
      int index, int value) {
    ensureFieldTypeIsMutable();
    fieldType_.setInt(index, value);
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param value The enum numeric value on the wire for fieldType to add.
   */
  private void addFieldTypeValue(int value) {
    ensureFieldTypeIsMutable();
    fieldType_.addInt(value);
  }
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param values The enum numeric values on the wire for fieldType to add.
   */
  private void addAllFieldTypeValue(
      java.lang.Iterable<java.lang.Integer> values) {
    ensureFieldTypeIsMutable();
    for (int value : values) {
      fieldType_.addInt(value);
    }
  }

  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.cosmos_proto.ScalarDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.cosmos_proto.ScalarDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.cosmos_proto.ScalarDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return (Builder) DEFAULT_INSTANCE.createBuilder();
  }
  public static Builder newBuilder(com.cosmos_proto.ScalarDescriptor prototype) {
    return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
  }

  /**
   * <pre>
   * ScalarDescriptor describes an scalar type to be used with
   * the scalar field option and declared by declare_scalar.
   * Scalars extend simple protobuf built-in types with additional
   * syntax and semantics, for instance to represent big integers.
   * Scalars should ideally define an encoding such that there is only one
   * valid syntactical representation for a given semantic meaning,
   * i.e. the encoding should be deterministic.
   * </pre>
   *
   * Protobuf type {@code cosmos_proto.ScalarDescriptor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.cosmos_proto.ScalarDescriptor, Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos_proto.ScalarDescriptor)
      com.cosmos_proto.ScalarDescriptorOrBuilder {
    // Construct using com.cosmos_proto.ScalarDescriptor.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * name is the name of the scalar. It should be a short-name (without
     * a period) such that the fully qualified name of the scalar will be
     * package.name, ex. for the package a.b and scalar named C, the
     * fully-qualified name will be a.b.C.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      return instance.getName();
    }
    /**
     * <pre>
     * name is the name of the scalar. It should be a short-name (without
     * a period) such that the fully qualified name of the scalar will be
     * package.name, ex. for the package a.b and scalar named C, the
     * fully-qualified name will be a.b.C.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      return instance.getNameBytes();
    }
    /**
     * <pre>
     * name is the name of the scalar. It should be a short-name (without
     * a period) such that the fully qualified name of the scalar will be
     * package.name, ex. for the package a.b and scalar named C, the
     * fully-qualified name will be a.b.C.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      copyOnWrite();
      instance.setName(value);
      return this;
    }
    /**
     * <pre>
     * name is the name of the scalar. It should be a short-name (without
     * a period) such that the fully qualified name of the scalar will be
     * package.name, ex. for the package a.b and scalar named C, the
     * fully-qualified name will be a.b.C.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      copyOnWrite();
      instance.clearName();
      return this;
    }
    /**
     * <pre>
     * name is the name of the scalar. It should be a short-name (without
     * a period) such that the fully qualified name of the scalar will be
     * package.name, ex. for the package a.b and scalar named C, the
     * fully-qualified name will be a.b.C.
     * </pre>
     *
     * <code>string name = 1 [json_name = "name"];</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * description is a human-readable description of the scalar and its
     * encoding format. For instance a big integer or decimal scalar should
     * specify precisely the expected encoding format.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @return The description.
     */
    @java.lang.Override
    public java.lang.String getDescription() {
      return instance.getDescription();
    }
    /**
     * <pre>
     * description is a human-readable description of the scalar and its
     * encoding format. For instance a big integer or decimal scalar should
     * specify precisely the expected encoding format.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @return The bytes for description.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      return instance.getDescriptionBytes();
    }
    /**
     * <pre>
     * description is a human-readable description of the scalar and its
     * encoding format. For instance a big integer or decimal scalar should
     * specify precisely the expected encoding format.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(
        java.lang.String value) {
      copyOnWrite();
      instance.setDescription(value);
      return this;
    }
    /**
     * <pre>
     * description is a human-readable description of the scalar and its
     * encoding format. For instance a big integer or decimal scalar should
     * specify precisely the expected encoding format.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDescription() {
      copyOnWrite();
      instance.clearDescription();
      return this;
    }
    /**
     * <pre>
     * description is a human-readable description of the scalar and its
     * encoding format. For instance a big integer or decimal scalar should
     * specify precisely the expected encoding format.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDescriptionBytes(value);
      return this;
    }

    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @return A list containing the fieldType.
     */
    @java.lang.Override
    public java.util.List<com.cosmos_proto.ScalarType> getFieldTypeList() {
      return instance.getFieldTypeList();
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @return The count of fieldType.
     */
    @java.lang.Override
    public int getFieldTypeCount() {
      return instance.getFieldTypeCount();
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param index The index of the element to return.
     * @return The fieldType at the given index.
     */
    @java.lang.Override
    public com.cosmos_proto.ScalarType getFieldType(int index) {
      return instance.getFieldType(index);
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param index The index to set the value at.
     * @param value The fieldType to set.
     * @return This builder for chaining.
     */
    public Builder setFieldType(
        int index, com.cosmos_proto.ScalarType value) {
      copyOnWrite();
      instance.setFieldType(index, value);
      return this;
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param value The fieldType to add.
     * @return This builder for chaining.
     */
    public Builder addFieldType(com.cosmos_proto.ScalarType value) {
      copyOnWrite();
      instance.addFieldType(value);
      return this;
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param values The fieldType to add.
     * @return This builder for chaining.
     */
    public Builder addAllFieldType(
        java.lang.Iterable<? extends com.cosmos_proto.ScalarType> values) {
      copyOnWrite();
      instance.addAllFieldType(values);  return this;
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFieldType() {
      copyOnWrite();
      instance.clearFieldType();
      return this;
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @return A list containing the enum numeric values on the wire for fieldType.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
    getFieldTypeValueList() {
      return java.util.Collections.unmodifiableList(
          instance.getFieldTypeValueList());
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of fieldType at the given index.
     */
    @java.lang.Override
    public int getFieldTypeValue(int index) {
      return instance.getFieldTypeValue(index);
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for fieldType to set.
     * @return This builder for chaining.
     */
    public Builder setFieldTypeValue(
        int index, int value) {
      copyOnWrite();
      instance.setFieldTypeValue(index, value);
      return this;
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param value The enum numeric value on the wire for fieldType to add.
     * @return This builder for chaining.
     */
    public Builder addFieldTypeValue(int value) {
      instance.addFieldTypeValue(value);
      return this;
    }
    /**
     * <pre>
     * field_type is the type of field with which this scalar can be used.
     * Scalars can be used with one and only one type of field so that
     * encoding standards and simple and clear. Currently only string and
     * bytes fields are supported for scalars.
     * </pre>
     *
     * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
     * @param values The enum numeric values on the wire for fieldType to add.
     * @return This builder for chaining.
     */
    public Builder addAllFieldTypeValue(
        java.lang.Iterable<java.lang.Integer> values) {
      copyOnWrite();
      instance.addAllFieldTypeValue(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:cosmos_proto.ScalarDescriptor)
  }
  @java.lang.Override
  @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
  protected final java.lang.Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      java.lang.Object arg0, java.lang.Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.cosmos_proto.ScalarDescriptor();
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case BUILD_MESSAGE_INFO: {
          java.lang.Object[] objects = new java.lang.Object[] {
            "name_",
            "description_",
            "fieldType_",
          };
          java.lang.String info =
              "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u0208\u0002\u0208" +
              "\u0003,";
          return newMessageInfo(DEFAULT_INSTANCE, info, objects);
      }
      // fall through
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        com.google.protobuf.Parser<com.cosmos_proto.ScalarDescriptor> parser = PARSER;
        if (parser == null) {
          synchronized (com.cosmos_proto.ScalarDescriptor.class) {
            parser = PARSER;
            if (parser == null) {
              parser =
                  new DefaultInstanceBasedParser<com.cosmos_proto.ScalarDescriptor>(
                      DEFAULT_INSTANCE);
              PARSER = parser;
            }
          }
        }
        return parser;
    }
    case GET_MEMOIZED_IS_INITIALIZED: {
      return (byte) 1;
    }
    case SET_MEMOIZED_IS_INITIALIZED: {
      return null;
    }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:cosmos_proto.ScalarDescriptor)
  private static final com.cosmos_proto.ScalarDescriptor DEFAULT_INSTANCE;
  static {
    ScalarDescriptor defaultInstance = new ScalarDescriptor();
    // New instances are implicitly immutable so no need to make
    // immutable.
    DEFAULT_INSTANCE = defaultInstance;
    com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
      ScalarDescriptor.class, defaultInstance);
  }

  public static com.cosmos_proto.ScalarDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ScalarDescriptor> PARSER;

  public static com.google.protobuf.Parser<ScalarDescriptor> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

