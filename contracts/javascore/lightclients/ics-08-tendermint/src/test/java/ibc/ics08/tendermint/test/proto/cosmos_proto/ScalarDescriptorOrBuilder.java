// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos_proto/cosmos.proto

package com.cosmos_proto;

public interface ScalarDescriptorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:cosmos_proto.ScalarDescriptor)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * name is the name of the scalar. It should be a short-name (without
   * a period) such that the fully qualified name of the scalar will be
   * package.name, ex. for the package a.b and scalar named C, the
   * fully-qualified name will be a.b.C.
   * </pre>
   *
   * <code>string name = 1 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * description is a human-readable description of the scalar and its
   * encoding format. For instance a big integer or decimal scalar should
   * specify precisely the expected encoding format.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @return A list containing the fieldType.
   */
  java.util.List<com.cosmos_proto.ScalarType> getFieldTypeList();
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @return The count of fieldType.
   */
  int getFieldTypeCount();
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param index The index of the element to return.
   * @return The fieldType at the given index.
   */
  com.cosmos_proto.ScalarType getFieldType(int index);
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @return A list containing the enum numeric values on the wire for fieldType.
   */
  java.util.List<java.lang.Integer>
  getFieldTypeValueList();
  /**
   * <pre>
   * field_type is the type of field with which this scalar can be used.
   * Scalars can be used with one and only one type of field so that
   * encoding standards and simple and clear. Currently only string and
   * bytes fields are supported for scalars.
   * </pre>
   *
   * <code>repeated .cosmos_proto.ScalarType field_type = 3 [json_name = "fieldType"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of fieldType at the given index.
   */
  int getFieldTypeValue(int index);
}
