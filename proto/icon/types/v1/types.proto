syntax = "proto3";

package icon.types.v1;

import "gogoproto/gogo.proto";

// go_package output 
option go_package = "libraries/go/common/icon;icon";
option (gogoproto.goproto_getters_all)  = false;


// BlockIdFlag indicates which BlcokID the signature is for
enum BlockIDFlag {
    option (gogoproto.goproto_enum_stringer) = true;
    option (gogoproto.goproto_enum_prefix)   = false;
  
    BLOCK_ID_FLAG_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "BlockIDFlagUnknown"];
    BLOCK_ID_FLAG_ABSENT  = 1 [(gogoproto.enumvalue_customname) = "BlockIDFlagAbsent"];
    BLOCK_ID_FLAG_COMMIT  = 2 [(gogoproto.enumvalue_customname) = "BlockIDFlagCommit"];
    BLOCK_ID_FLAG_NIL     = 3 [(gogoproto.enumvalue_customname) = "BlockIDFlagNil"];
  }


// SignedMsgType is a type of signed message in the consensus.
enum SignedMsgType {
    option (gogoproto.goproto_enum_stringer) = true;
    option (gogoproto.goproto_enum_prefix)   = false;
  
    SIGNED_MSG_TYPE_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "UnknownType"];
    // Votes
    SIGNED_MSG_TYPE_PREVOTE   = 1 [(gogoproto.enumvalue_customname) = "PrevoteType"];
    SIGNED_MSG_TYPE_PRECOMMIT = 2 [(gogoproto.enumvalue_customname) = "PrecommitType"];
  
    // Proposals
    SIGNED_MSG_TYPE_PROPOSAL = 32 [(gogoproto.enumvalue_customname) = "ProposalType"];
}

message SignedHeader {
    BTPHeader       header              =   1;
    CommitVoteList  commit_vote_list    =   2;
}

message BTPHeader{

    int64       main_height     = 1;
    int32       Round           = 2;
    bytes       next_proof_context_hash = 3;
    repeated    MerkleNode network_section_to_root  = 4;
	int64       network_id      = 5;
	int64       update_number   = 6;
	bytes       prev_network_section_hash   = 7; 
    int64       message_count   = 8;
    bytes       message_root    = 9;
    bytes       next_proof_context  = 10;
}

message  MerkleNode {
    int32 Dir   = 1;
    bytes value = 2;
}

message CommitVoteList{
    int32       round = 1;
    PartSetID   block_part_set_id = 2;
    CommitVoteItem items = 3; 
}

message  CommitVoteItem {
    int64 timestamp = 1;
    bytes signature = 2;
}

message PartSetID{
    uint32  count = 1;
    bytes   hash  = 2;
}

message HR{
    int64 height = 1;
    int32 rount  = 2;
}

message  Vote{
    int64           height      = 1;
    int32           round       = 2;
	SignedMsgType   type        = 3;
	bytes           block_id    = 4;
    PartSetID block_part_set_id = 5;
    int64           timestamp   = 6;
}

message ValidatorSet{
    repeated bytes validators = 1;
}